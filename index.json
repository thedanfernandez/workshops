[{"uri":"https://thedanfernandez.github.io/workshops/web-basics/","title":"Web Basics","tags":[],"description":"An introductory guide on how to make a simple website from scratch.","content":"Let\u0026rsquo;s build a website! Benji was born in Houston, Texas. Soon after Benji was born, a devastating hurricane hit Houston. Hurricane Harvey displaced more than 30,000 people, including Benji’s family. Benji can’t speak human so we don’t know the details. All we know is that Benji is looking for a home and is committed to be a good boy wherever he goes. Let’s make a website so we can share his information, and find his forever home! \n"},{"uri":"https://thedanfernandez.github.io/workshops/python-basics/","title":"Python: Basics","tags":[],"description":"Basics of python","content":"Python basics  Print Comments Functions Help  "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"To help Alex live in a beehive, he needs to learn how to create a honeycomb! We will use Python\u0026rsquo;s turtle library to draw a honeycomb for Alex.\nUsing Repl.it Today you will be using Repl.it to learn how to code in Python. Here is an example interactive window that you will use today:\n Before we start, let\u0026rsquo;s first understand how the window works. The main.py file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom white screen, under the result tab. Today, our results will be an animation of a drawing being created.\nNext, let\u0026rsquo;s explain further some of the code that has been provided to you in the main.py file.\nLibraries and import statements Look at the top of the code. You will see the following line:\nimport turtle This statement allows us to import all of the drawing functionality provided by the turtle library. A library is a place where related functionality are grouped together for use in the Python language. For example, the turtle library introduces a helpful artistic turtle in the result window, which we can control using our code to draw images.\nComments The gray line that starts with # is called a comment. These are notes in the code that helps to explain what is happening in plain English. As they are ignored by the computer, they are often used so that when other developers work on the same code, they will have an easier time reading and understanding what is going on.\n "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/1-meet-dj-nuevo/","title":"Meet DJ Nuevo","tags":[],"description":"Set up headphones, check audio","content":"Nuevo has new headphones! Can you find yours? You got contacted to make Nuvi\u0026rsquo;s next hit mixtape, but when you get to the studio, Nuvi says their next project is going to be produced all in code. This is something that hasn\u0026rsquo;t been done before, are you up to the challenge? Look around yourself to find your headphones and get ready to join him!\nBefore we start, we should check if your headphones are working. Try playing the following audio. What do you hear?\n"},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/starting-up/","title":"Starting Up","tags":[],"description":"","content":"Starting Up The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game! Let\u0026rsquo;s get the game set up.\nOpen your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/nuevoguesstheword. Your screen should look like this:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.cs file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the right side, called the console.\nIf you press run now, you will see that nothing happens! Your job is to help Nuvi complete the code for this game!\nClick the fork button to create a copy of the code for yourself to work on. Any activities under the Activity sections will be done in this browser tab. You will do these activities on your own, but help is available when you are stuck.\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-basics/1-print/","title":"Print statement","tags":[],"description":"","content":"Make your program talk to you! Print statements are used to print something on the console. Use print(\u0026quot;Hello World\u0026quot;) to print Hello World in the output screen. We will later learn that print is a function and we use it to perform a print job. Whatever you pass to the print function is printed on the screen. print(\u0026quot;Hello World\u0026quot;) \n\t"},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/basics/","title":"Basics","tags":[],"description":"","content":"What is a website? A website is just a page that can be found on the Internet. It is displayed through a browser when you type the address (aka unique name) in the address bar.\nParts of a website Common website elements include navigation bars, footers, search bars, and contact forms.\nWebsite design The first step in making a website is to decide which elements we want, and how they will look. This process is called layout design and it’s just a rough sketch of how the different pieces are going to come together. There are many tools to help you do this, but the oldest and one of the most popular is good ol’ pen and paper. Here’s how I sketched mine:\n![alt text](media/dog-layout-sm.png\u0026quot;example website for Benji\u0026rdquo;)\nThis sketch is just a guideline. It’s okay to change things around as we start putting it together. A good rule of thumb is to start as simple as possible.\n\r"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/the-basics/","title":"The Basics - Drawing a colored line","tags":[],"description":"","content":"Before Alex can learn how to create a beehive, he must first learn how to draw a colored line. We will add code to the below repl.it window, and we will do this in two parts.\n First, we need tell the turtle what color we want the line to be. To do this, let\u0026rsquo;s type in:\nturtle.color(\u0026quot;orange\u0026quot;) Let\u0026rsquo;s try to understand this line of code in more detail.\nStrings Anything you see in quotation marks is called a string. A string is just a sequence of characters (whether they are letters, numbers, or symbols).\nIn the code above, \u0026quot;orange\u0026quot; is a string. Other examples of strings include \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; and \u0026quot;green\u0026quot;. Be careful, 123, abc! and green are not strings because there are missing quotation marks!\nMethods turtle.color() is a method. We use methods to get the turtle to perform certain actions. In this case, turtle.color() is changing the color of the lines it draws to what color we tell it to. We told it to change the color to orange by sending it the string \u0026quot;orange\u0026quot; as an argument.\nArguments Arguments are inputs that you pass in to methods to use. In our example, turtle.color() needs a string argument representing the name of the color to set the turtle, so we passed in \u0026quot;orange\u0026quot; as an argument to the method. We could also have told it to change the color to something else, but it has to have been a color that turtle.color() understands. The colors that it recognizes are: \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, and \u0026quot;gray\u0026quot;. If we send in anything else besides one of these color strings, we get the default color, which is black.\n Now that we have picked the color that we want, we can now draw a line! To draw a line there are two methods that we can use:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) will make the turtle go forward 50 pixels and draw a line in the direction it\u0026rsquo;s facing, while turtle.backward(50) will do the same, but in the opposite direction.\nPixels An image is composed of thousands, if not, millions of pixels. A pixel is a unit of measurement for digital images, similar to how we measure weight in pounds, or long distances in miles.\nIntegers An integer is just any whole number, whether positive or negative. In this example, both turtle.forward() and turtle.backward() expect an integer as an argument instead of a string. This is because the argument represents the number of pixels you want the turtle to move when drawing. A string would clearly not work for these methods!\n Let\u0026rsquo;s make the turtle go forward, so type in turtle.forward(50). Now your code should look something like this:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Now that we have completed our code, press run. You should see the following in the result screen:\nIf so, great! If not, please ask for help.\nAs an exercise, try understanding what the following line of code does, and try adding this to your code. What does it do?\nturtle.shape(\u0026quot;turtle\u0026quot;) HELP! Nothing shows up on the screen! If, after pressing run, you don\u0026rsquo;t see anything on the screen, check to see if there is a red x beside the console tab (the console tab is right beside the result tab in the middle of the screen). If you do, you have encountered some errors! Please click the console tab and ask for help. Beware of the following when coding in python:\n Do not use any capital letters. Make sure that that none of the lines you have written so far start with any spaces. Ensure that the name of the color that you have chosen is surrounded in quotation marks, and that the color is between the parentheses in turtle.color(). \n "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/2-music-basics/","title":"Music Basics","tags":[],"description":"basics of music","content":"Basics first. A few things about music. What is Music? Music is the chronological organisation of sounds; that is, making certain sounds at certain times, which make melodic, rhythmic and harmonic sense. The first, most basic concept, is keeping the sounds \u0026ldquo;in time\u0026rdquo;. This leads us to some of the first few musical concepts: beat, rhythm, duration \u0026amp; tempo.\n Beat is the regular pulse which provides a timeline for the rhythm to anchor itself to. Rhythm is essentially repeated patterns of long or short, stressed or unstressed sounds or silences which fit into the main beat. Duration is the length of notes or sounds or silences which facilitate the rhythm. Tempo is the speed at which a piece of music is played.  "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/","title":"Python: Create music with EarSketch","tags":[],"description":"Create music using EarSketch","content":"Let\u0026rsquo;s make some music! Welcome to this introductory guide on how to make music using EarSketch \u0026amp; Python. To jump to a particular activity, click on the section link below:\n Meet DJ Nuevo Music Basics Python Basics Getting started with Earsketch Activity 1 - Set tempo and add sounds Activity 2 - Make a song Activity 3 - Organize songs using functions Activity 4 - Add Effects to your songs Activity 5 - Fade In Help, I am stuck!  "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/writing-to-console/","title":"Writing to Console","tags":[],"description":"","content":"Writing to Console Console.WriteLine means to tell the computer to print the sentence enclosed within the parentheses () out onto the console.\nWorking Together  In the repl.it window below, press run. You see that Hello World is printed out to the screen on the right. Without removing the quotation marks, try changing \u0026quot;Hello World\u0026quot; to another sentence. Press run to see if anything changes. Add another Console.WriteLine below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out. If you see any red text, please ask for help.  \n We will use printing heavily in the later lessons, so make sure you understand this before continuing!\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help or check the debugging page at the end of this tutorial. Beware of the following when coding in C#:\n The c in Console, and the w and l in WriteLine are capitalized. There is a semicolon ; at the end of the line. Make sure the sentence you wish to print is surrounded in quotation marks, and that the sentence is between the parentheses. Do not delete any curly braces { or }. \n "},{"uri":"https://thedanfernandez.github.io/workshops/python-basics/2-comments/","title":"Comments","tags":[],"description":"","content":"Make notes while you are coding Comments are the parts of the code that do not get evaluated. In Python, they are preceded by the # symbol. Anything after the # symbol is part of the comment and is ignored by your code. Comments are put in the code to tell the readers what the code is doing. They can make maintenance of code easy and can also help in finding bugs. # This is a comment. Everything here will be ignored. # Coders use this part to explain/maintain the code. \n "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/putting-together/","title":"Putting it together","tags":[],"description":"","content":"Putting it together For your browser to understand what each element of your site is, we need to label them with HTML tags. HTML stands for Hypertext Markup Language. Tags are words surrounded by the symbols \u0026lt;and\u0026gt;. For example, the \u0026lt;img\u0026gt; tag tells your browser “this is an image.” The \u0026lt;button\u0026gt; tag tells it “this is a button.”\nTags can also be used to organize your webpage! The image below outlines the structure of a basic webpage. The head usually contains the additional libraries used and the page title, while the body contains most of the displayed content.\nMost tags need an opening tag and a closing tag. For example, you will see all pages have an \u0026lt;html\u0026gt; opening tag at the top, and a closing \u0026lt;/html\u0026gt; tag at the end. This tells the browser where the HTML elements start and where they end. Think of tags like quotation marks; for example, the computer will understand that everything in between the tags \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt; is part of an HTML website.\nThere are also a few tags, like the image tag \u0026lt;img\u0026gt;, that are self-closing, meaning that they only need an opening tag, and do not need a closing tag.\nHere is an example:\nSee the Pen HTML Basics by Deliana Escobari (@Sunny-Dee)\ron CodePen.\r\r"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-1/","title":"Activity 1 - Drawing a square","tags":[],"description":"","content":"Kudos! You helped Alex draw a line! Now let’s step it up and help Alex draw a square. To draw a square, we need to follow these steps:\n Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps  Remember to use turtle.forward() to draw lines. To turn 90 degrees left, you need to pass 90 as the argument to the turtle.left() method:\nturtle.left(90)  "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/","title":"Python Turtle","tags":[],"description":"Learning Python with Turtle","content":"Introduction Welcome to the Nuevo Beehive! You are right on time to help our new baby bee Alex.\nAlex lives in a country named the Turtle Islands. Residents of the Turtle Islands speak a language called Python. We are going to use Python to teach Alex how to live in a beehive. Are you up for the challenge? In this tutorial, we will learn how to use the Python language to help Alex beecome a busy bee!\nTable of Contents  Using Repl.It \n The Basics - Drawing a colored line \n Activity 1 - Drawing a square \n Activity 2 - Simplifying code with loops \n Activity 3 - Drawing a hexagon \n Activity 4 - Simplifying code with functions \n Activity 5 - Drawing a honeycomb \n Part 2 - Building a Mandala Flower \n Activity 6 - Moving the turtle \n Activity 7 - Drawing a figure 8 \n Activity 8 - Creating a mandala flower \n Activity 9 - Coloring your mandala flower \n Activity 10 - Randomizing the color of your mandala flower petals \n Activity 11 - Now, it's your turn! \n Python Turtle Spanish \n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/comments/","title":"Comments","tags":[],"description":"","content":"Comments Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:\n To comment out one line, place // in front of a line of code. For example:  // This is a single-line comment. To comment out multiple lines at once, indicate the start of the comment with /* and the end of the comment with */. For example:  /* This is a multi-line comment. This line is also part of the comment. */ To remove a comment (or uncomment a line), simply delete the // for a single-line comment, or the /* and the */ characters for the multi-line comment.\nWorking Together  Place // in front of Console.WriteLine(\u0026quot;Hello World\u0026quot;);. After pressing run, check to make sure that Hello World is not printed to the console. Delete the // and instead, surround Console.WriteLine(\u0026quot;Hello World\u0026quot;); with /* and */. Check that Hello World is still not printed to the console after pressing run. Delete both /* and */, and press run. Hello World should now be printed to the console.   Throughout today\u0026rsquo;s activity you will see various multi-line comments and // TODO comments. These comments will guide us towards completing the Guess the Word game, so be sure you understand how to comment and uncomment code.\n "},{"uri":"https://thedanfernandez.github.io/workshops/python-basics/3-functions/","title":"Functions","tags":[],"description":"Setting up headphones","content":"Functions are a way to organize pieces of similar or repeating code. Rather than having to constantly type out the same code, we can put the desired code in a method and call it whenever we want to use it.\nNote: The purpose of a function is to help reduce redundant code throughout the program.\nCreating a function - Function declaration \u0026amp; definition Declaration: To make a function in python, we must use the def keyword. This keyword tells the code editor where the function is defined. def is followed by the name of the function. In order to generalize the function (so that we can use it at multiple places), we might need to send some information to it. This is achieved using parameters. They are placed in between parentheses () and follows right after the name of the function. If no parameters are needed, they can be ignored. The function declaration ends with a colon. Here\u0026rsquo;s what a function looks like:\nWarning: Make sure that the first line of your function always ends with a colon :\nDefinition: In Python, indentation defines which code is controlled by the function. For example, look at the following image: The code that is indented underneath the sectionA function is the code that is executed each time function sectionA is called.\nWarning: Since identation is very important in Python, make sure that the body of the function always starts with 2 spaces.\nUsing the function - Function call To call a function, input the name of the function and its parameters wherever you want to execute the function. For example, in order to call function sectionA, we would do something like this: Be careful: When making a function in Python, you must define the function and its contents before it is called. In other words, in the code, you need to put the function declaration above the function call. Otherwise, you will receive a NameError like below. See the following figure for an example: Challenge - Create your own function! Challenge: Create a function called addNumbers that takes 2 parameters called number1 \u0026amp; number2 and prints the sum on console. Call the function addNumbers with parameters 3 \u0026amp; 5. What is printed on the console? def addNumbers(number1, number2): print(number1+number2)\naddNumbers(3,5) \n "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/3-python-basics/","title":"Python Basics","tags":[],"description":"basics of python","content":"Python basics To code music, we need to learn a little Python. Don\u0026rsquo;t worry, it won\u0026rsquo;t bite you. Python is one of the languages that we humans use to tell computers what to do. These languages are known as \u0026ldquo;programming languages\u0026rdquo;. We will learn Python concepts throughout the class, but let\u0026rsquo;s start with a simple print statement.\nIf you want to jump to a specific Python section, click on the topic below:\n Print Comments Functions  "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/challenge-one/","title":"Challenge 1","tags":[],"description":"","content":" Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below) Use the header tags to add a title, and the paragraph tags to write a paragraph about Benji If you have time: write a list of Benji\u0026rsquo;s favorite treats: turkey, peanut butter, and string cheese  Try it yourself!\nUse this reference chart to try some html tags on your own.\n   Tag Description Example     \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; Describes an HTML Document. Any website must start with the  opening tag and end with the  closing tag. See the Code Pen example above.   \u0026lt;!-- --\u0026gt; Describes a comment. Comments are meant for other coders to see but they are not displayed on the website. \u0026lt;!-- This line will not show in the browser --\u0026gt;   \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; Contains all the HTML elements that give information to the browser to display the website correctly. The HTML elements between  and  tag are not displayed. See the Code Pen example above   \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; Contains the title of the website to be used for naming the browser tab. \u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt; My Website \u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;   \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; Contains all the HTML elements that are displayed in the page like text and pictures. See the Code Pen example above.   \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\n\u0026hellip; \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; Defines a heading/title. \u0026lt;h1\u0026gt; defines the most important (largest) heading/title, while \u0026lt;h6\u0026gt; defines the least important (smallest) heading. \u0026lt;h1\u0026gt;This will be a big title\u0026lt;/h1\u0026gt;\n\u0026lt;h4\u0026gt;This will be a smaller title\u0026lt;/h4\u0026gt;   \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; Describes a paragraph. \u0026lt;p\u0026gt;Dogs evolved to love humans. In conclusion, dogs are a human’s best friend.\u0026lt;/p\u0026gt;   \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; Defines a division or section on the site. \u0026lt;div\u0026gt;\n\u0026lt;h1\u0026gt;All about me\u0026lt;/h1\u0026gt;\n\u0026lt;/div\u0026gt;   \u0026lt;img\u0026gt; An image. It’s a self-closing tag but you must specify the source of the image for the browser to know where to get the image from. \u0026lt;img src=\u0026quot;aka.ms/Benji-the-dog\u0026rdquo;\u0026gt;   \u0026lt;hr\u0026gt; Draws a horizontal line. Another self-closing tag that’s useful if you want to break up the page’s content. \u0026hellip; \u0026lt;hr\u0026gt; \u0026hellip;   \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt; A list. To start the list, use a \u0026lt;ul\u0026gt; tag. For each item to be added to the list, surround the item with the \u0026lt;li\u0026gt; and \u0026lt;/li\u0026gt;tags. Finish the list with the \u0026lt;/ul\u0026gt; tag. \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;This is a list item.\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;    "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-2/","title":"Activity 2 - Simplifying code with loops","tags":[],"description":"","content":"Great! You drew a square. But notice that we are writing the same lines over and over again! We had to repeat the instructions to draw a line and turn left 4 times. Wouldn’t it be great if we can give instructions once and tell the program to repeat it 4 times? Fear not, we can!\nTo do this, we need to use loops. Loops run a set of instructions multiple times. To see this in action, here is some example code that draws a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120) Let’s understand what this code does. for i in range(3): This statement tells the program to run the instructions in a loop. range(3) sets a limit to how many times the loop runs (in this case, 3 times). The letter i is called a variable. It is used to keep track of how many times we have run the contents of the loop.\nTricky Python syntax - Part 1 Syntax is how we write languages so that it is understandable. In English we have spelling and grammar rules to help understand each other. Similarly, the Python language has syntax rules so that the computer can understand our code.\nFirst, notice that at the end of the line with for, we added a colon (:); this signifies that the next line will be part of the for loop. The computer will complain if you miss the :!\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nTo see how big of a difference this makes, take a look at the below code. Because we removed the tab in front of turtle.left(120), the code will no longer work as expected. Now, we only repeat turtle.forward(50) three times, and we get a straight line instead!\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Now, take the example code that we have provided, and modify it slightly so that, instead of drawing a triangle, it draws a square. You can look back at what you did in Activity 1 as a hint.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-1/","title":"Activity 1","tags":[],"description":"","content":"Activity 1 Go to the code containing the GuessTheWord game. Press run. Notice that Press 'run' on the top of the screen to play again. is the only thing that is printed to the console. Let\u0026rsquo;s add a welcome message so that the player knows they playing the Guess the Word game.\nFind // TODO (ACTIVITY 1) in the code. Add a line of code to print Welcome to C# GuessTheWord to the console. If you did this correctly, Welcome to C# GuessTheWord will be printed to the console after pressing run.\n"},{"uri":"https://thedanfernandez.github.io/workshops/adventure/","title":"Python Choose Your Own Adventure Game","tags":[],"description":"An introductory guide on how to make a Choose Your Own Adventure Game in Python","content":"Part 1 – Welcome! Power of Stories Hi everyone! Today we are going to be using our engineering superpowers to be the best storytellers. Stories are a great way to connect people, share traditions, and learn new things!\nTurn to your neighbor and share your favorite story! It can be a story that your family members have shared. Your favorite story line from a Marvel movie or your favorite novel.\nNow through code, we get the chance to create or re-tell amazing stories and spread our ideas further!\nChoose Your Own Adventure Games! Today you will be choosing and designing the plot of the stories that you are being told! In Choose Your Own Adventure Games you are the protagonist of the story, and you get to choose the actions that the characters are taking and the outcomes of those actions. You have control!\nDemo Let’s try it out!\n What did you all think? We’re now going to learn some cool skills that will allow us to create our own stories.\nPart 2 – Let’s Get Started! Starting Up Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer) and go to https://repl.it. Scroll to the bottom of the page, look for ‘languages’, search for Python and click it.\nYou should see something like the following screen:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.py file contains code, or instructions for the computer to run. Anything that results from running the code will be displayed on the right side. This window is called the console.\nWriting to Console (Printing) Let’s start by doing a print statement. A print statement allows you to take control of the computer and make it print something out!\nTo start, copy and paste this text in your Repl.it window:\nprint(\u0026ldquo;HelloWorld!\u0026quot;)\nHit run and watch your console say ”Hello, World!” on the screen to the right! print tells the computer to print the sentence within the parentheses () into the console, or the screen on the right. Note: The RUN buttom looks like this: HELP! I got a lot of red text!\nIf you see any red text, you have encountered some errors! Please ask for help or check the debugging page at the end of this tutorial. In particular, beware of the following when coding in Python:\n Make sure the sentence you wish to print is surrounded in quotation marks and that the sentence is inside the parentheses.  Spacing in Python is very important. Make sure you don’t have any unnecessary spaces or tabs at the beginning or at the end of each line, as Python won’t be able to read the code otherwise. For example, don’t put any spaces before print, or any spaces after the last parenthesis in print(\u0026ldquo;Hello, World!).  Activity 1  Without removing the quotation marks, try changing \u0026ldquo;Hello, World\u0026rdquo; to another sentence. (For example – \u0026ldquo;My name is Nuvi!\u0026quot;) Press run to see if anything changes. Add another print below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out.  role=\u0026quot;alert\u0026quot;\u0026gt; We will use printing a lot in the later lessons, so make sure you understand this before continuing! \nComments If at any time during this activity, you wish to write notes to help you understand the code, you can use the # symbol to create a comment. Any text after the # symbol will be ignored by the computer. Try adding a comment above your first line of code and press run. You will see that the computer will ignore your comment.\n#This is my first line of code print(\u0026ldquo;Hello,world!) Be careful, if you remove the # symbol, your code will not work! The Basics Strings Anything that is surrounded by quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;banana!\u0026quot;, and \u0026ldquo;Hello World\u0026rdquo; are strings, but 2 and Hello World are not strings, because the quotation marks are missing.\nYou can combine many strings together using the + sign.\nFor example:\n \u0026ldquo;Apple\u0026rdquo; + \u0026ldquo;Pineapple\u0026rdquo; produces the string \u0026ldquo;ApplePineapple\u0026rdquo;. \u0026ldquo;Nuevo\u0026rdquo; + \u0026quot; \u0026quot; + \u0026ldquo;Foundation\u0026rdquo; produces the string \u0026ldquo;Nuevo Foundation\u0026rdquo;.  What if you wanted to combine your first and last name? How would you do that?\nActivity 2 Delete all the print statements in your code. Start your code with the line print(\u0026ldquo;Nuevo\u0026rdquo; + \u0026quot; \u0026quot; + \u0026ldquo;Foundation\u0026rdquo;)\nIf you run it, you should get the following output:\nNuevo Foundation  Let’s try and find two more ways to print the string \u0026ldquo;Nuevo Foundation\u0026rdquo; using two plus (+) symbols in each print statement. Once you make this work, you should have \u0026ldquo;Nuevo Foundation\u0026rdquo; printed out 3 times. In other words, your console should look like this after you press run: Nuevo Foundation Nuevo Foundation Nuevo Foundation\nrole=\u0026quot;alert\u0026quot;\u0026gt; Hint: The strings that you combine do not have to be real words! For example, \u0026ldquo;Ap\u0026rdquo; + \u0026ldquo;ple\u0026rdquo; will produce the string \u0026ldquo;Apple\u0026rdquo;. Ask for help if you are confused \nVariables Variables are simply names that we can give to values such as strings, numbers, and booleans. Here’s how to make a variable named s. We say s is a string that has the value \u0026ldquo;Hello, World!\u0026quot;. Can you describe the following variables?\ns = \u0026quot;Hello, World!\u0026quot; x = 88 happy = True  Press run.\nNote that variables are not printed out to the console. Instead, the variable simply saves the string, number, or boolean into the computer’s memory. We can use these variables in other statements. For example, the following code would print \u0026ldquo;Hello Nuevo Foundation\u0026rdquo; to the console:\nstr1 = \u0026quot;Hello\u0026quot; str2 = \u0026quot;Nuevo Foundation\u0026quot; print(str1 + \u0026quot; \u0026quot; + str2)  You can also do the following to print strings together while adding spaces in between the words.\nstr1 = \u0026quot;Hello\u0026quot; str2 = \u0026quot;Nuevo Foundation\u0026quot; print(str1, str2)  Activity 3  Create two new variables: A variable named comp that stores the string \u0026ldquo;Computer\u0026rdquo;. A variable named five that stores the number 5.  Next, use the variables and what you learned in the previous activities to print out the following to the console. You must use the variables!\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15  role=\u0026quot;alert\u0026quot;\u0026gt; Hint: If you’re stuck, consider using the + operator. Remember that you can use the variables comp and five multiple times in the same line! \nReading from the Console Now that we know the basics about variables, we can ask for input from the user. Use the following line to tell our program to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called value. value = input()\nHere’s an example of how to use input() to accept user input:\nprint(\u0026quot;What's your name?\u0026quot;) value = input() print(\u0026quot;Hello \u0026quot; + value + \u0026quot;!\u0026quot;)  Give this a try! When you hit run, you’ll notice that the doesn’t appear on the console yet. See below.\nThis is because the program is waiting for you to type something in. Enter your name or ‘Nuvi’ into the console on the right, press Enter, and check that it prints out correctly. role=\u0026quot;alert\u0026quot;\u0026gt; Note: Even if we type in a number, such as 8, the variable value will contain the string \u0026ldquo;8\u0026rdquo;. Be careful when attempting to do math on input variables! \nActivity 4 Let’s see if we can write a program that first prints the following two lines to console:\nWelcome! How can I help you today?  Afterwards, the console waits for user input. After the user types something in the console and presses Enter, the computer prints out:\nYou asked: [input]? I don’t know the answer to [input]. Goodbye!  [input] should be replaced with whatever the user had typed into the console. For example, if you wanted to ask “How old am I?”, the computer will print out that it doesn’t know the answer to that.\nrole=\u0026quot;alert\u0026quot;\u0026gt; Hint: This is very similar to the example that we went through together above. Try making some small changes from what we have already given you. \nConditional Statements Now that we know the basics of print statements, variables, and reading in input from the user – we can combine all these awesome skills with conditional statements. Conditional statements allow the computer to make decisions based off the value of an expression. In the real world, we use conditional statements all the time to make decisions! For example, if it is raining outside, then I use an umbrella. In this example, the I evaluated the weather outside and because it was raining, I made the sequential decision to use an umbrella.\nWhat conditional statements can you think of that you use in everyday life?\nIf-Statements We’ll start off with an if statement in its simplest form!\nShown above we have three different parts:\n If – this tells the computer that we are going to deciding based off the expression inside the parenthesis Expr – this represents the expression that we are evaluating. If the expression is “truthful” then the computer will enter the if statement and execute the statement. Statement – what the computer will complete if the expression is “truthful”  Let’s break down the example above and decide why some statements are “truthful” or “falsy”.\nWe are given to variables “x” and “y” are they are assigned two values. In the first if statement we are testing if the value of x is less than the value of y. Since 0 is less than 5, this is true! So, the first if- statement will print yes.\nHowever, we can see that y is not less than x, so it evaluates to false. The inside of the if statement will not be executed then. The same applies for the if statement evaluating if x is equal to 10. We see that x is equal to 0, so this expression is false, and the inside of the if statement won’t be executed.\nElse - Statements Now that we know how to use if statements to conditionally execute a single statement or multiple statements, let’s see what else we can do!\nSometimes, you need to evaluate a condition in order to act accordingly if it is true, but if it false we act differently. Here is the simplest form of the else statement.\nThis is really like the if statement! However here, if the if statement is false (not truthful) the program will automatically execute the statment2 in the else statement. A real-life example is if I’m hungry, I’ll eat. But if I’m not hungry, I won’t eat. Let’s take a look in python code!\nActivity 5 Let’s put it all together! Let’s see if we can create a program that takes prompts the user for their name. The user can write their name into the console. Then the computer can decide if their name is equal to your name, print out a response. Else, print out a different response!\n role=\u0026quot;alert\u0026quot;\u0026gt; Hint: Try talking out the different paths to a computer can take! Make sure to identify what the if and else conditions are. \nPart 3 - Time to Create Overview It’s time to start creating our own stories with all the skills we’ve learned today! The question that we are tackling today is how to get the audience involved with the story line, and the answer to this is CODE!\nSection 1: Story Boarding To get started, pull out a piece a paper and start “story boarding”. What does that mean? In order to develop a great story that allows the reader to choose between options, one can outline the flow of their story. This is a great planning step, that will you help you tremendously once you start coding! I would start with the 3 or 4 main choices your protagonist is going to make in the story. From there draw arrows for how the different choices your protagonist makes effects the story.\nNuevo’s Example Here an example of how to story board! The 4 main choices the protagonist will make is:\n Will she walk home from Robotics practice? Will she ride a bicycle home from Robotics practice? Will she play soccer with her friends at home? Will she go swimming with her friends at home?  Here is the resulting story board:\nNow, it’s great to mark up the different section of story board to match with different coding concepts that we’ve learned. If our story needs to make decision, our code we use if-else statements. If we are asking the audience to give us input to make decisions in our story, we will use user input. The actual story that the audience will be reading is string variables!\nLet’s mark it up on the story board! Here is what it looks like:\nIt’s really helpful to annotate your story board so you know what code related topics we can use! We see that the story line will be comprised off text or string variables. The user-input can be the reader typing whether they want to “walk” or “bike” or choose “soccer” or “swim”. The user can choose their story based off the input they give to the computer! The different paths that Nuevo can take are a series of decisions. Luckily, we learned how to use if – else statements, so the Nuevo can easily choose different paths the story can take!\nSection 2: Transferring the Story Board to Code! It’s time to open repl.it. Now it is time to create, let’s get creative!\nYou can continue working off Nuevo’s story line: \nYou can work on a template for a Choose Your Own Adventure game: \nOr you can start from scratch and make it your own! Just go to repl.it and start story telling!\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/4-getting-started-earsketch/","title":"Getting started with Earsketch","tags":[],"description":"intro on how to use Earsketch","content":"EarSketch is a free educational programming environment developed at Georgia Institute of Technology. We will be composing music using EarSketch today.\n  To make music, click on EarSketch to open it in a new tab.\n  Now, let\u0026rsquo;s get started. Click on Scripts icon on the left menu bar and select Create a new script. When prompted to enter the script name, enter myjam and click on Create button.   Do not delete any of the pre-existing code! We will insert our code in between them.\n  Recommended for Teachers - Overview of EarSketch Please take a look at overview of EarSketch before you start with the class. It is important to know how to navigate back and forth in the UI.\nThe navigation bar on the left side of the screen is your homebase for navigating through all that EarSketch has to offer.\n  The first item of the navigation bar is the Sounds collection. It is the central location for all the pre-loaded sounds that earsketch has to offer. In the sound browser, you can filter which sounds appear based on the artists, the genre, or instruments.   The next icon on the navigation bar is the Scripts pane. This is where we will write our code.   The next (third from top) icon is the Share section. You can use this to save your code, download or share it with your friends. We will skip this section for this exercise.\n  The last two icons on the navigation bar are the API Browser and the Curriculum guides.   We will use API browser to make music. An Application Programming Interface or API is a set of code that is ready for you to use right away! You may notice two icons to the right of each API. The first icon provides a description of the API and an example on how to use the API. The second icon copies and pastes the API into the code editor, so you do not even need to type it! We will use a couple of these in the coming sections.\nThe last icon in the above picture shows the Curriculum guide. If you want to know more about EarSketch, you can explore the section that appears on the right side of the window when you click on it. We will skip this section for this exercise.\n"},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/html-attributes/","title":"HTML Attributes","tags":[],"description":"","content":"HTML Attributes Each tag can also have additional information like style attributes that can change the properties of an element. There are attributes that we can use to change the visual appearance of an element, such as the size, the color, and the text font.\nAll attributes are formatted as: attribute-name=\u0026quot;value in quotes\u0026quot;. For example, we can change the color of a paragraph to red with this code: \u0026lt;p style=\u0026quot;color:red\u0026quot;\u0026gt;This text is red\u0026lt;/p\u0026gt;.\nThe image tags need a source, so we need an attribute within the tag to tell the browser where to go get the image from.\nHere is an example: And here is the result: "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-3/","title":"Activity 3 - Drawing a hexagon","tags":[],"description":"","content":"Great job! You just drew your first shape in Python with Turtle! Now let’s slightly change the code we already wrote to draw a square to instead draw a hexagon. Alex is a bee, after all, and he needs to draw hexagons to build his first honeycomb.\nTo help you draw a hexagon, think of how many sides a hexagon has. How many degrees are in each angle of a hexagon?\nAs a helpful reminder, this is the code that was used to create a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120)  "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/strings/","title":"Strings","tags":[],"description":"","content":"Strings Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, and \u0026quot;Hello World\u0026quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing.\nYou can combine many strings together using the + operator. For example:\n \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces the string \u0026quot;Nuevo Foundation\u0026quot;.  Working Together In the repl.it window below, we started the code with the line Console.WriteLine(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);.\nNote that there are many ways to combine strings together. For example, another way to print Nuevo Foundation would be to write Console.WriteLine(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);.\nWe will brainstorm at least one more way to print the string \u0026quot;Nuevo Foundation\u0026quot; using two + symbols in each Console.WriteLine statement. Verify that Nuevo Foundation is printed out 3 times. In other words, your console should look like this after you press run:\nNuevo Foundation Nuevo Foundation Nuevo Foundation   "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/5-activity-1-set-tempo-add-sounds/","title":"Activity 1 - Set tempo &amp; add sounds","tags":[],"description":"Setting up headphones","content":"Let\u0026rsquo;s take a closer look at the pre-existing code and understand what it means. We will be placing our new code between the setTempo() and finish() functions. The setTempo() function allows you to set the overall project tempo.\nQuick Fact: Tempo is the speed at which a piece of music is played. Changing a project\u0026rsquo;s tempo allows for different styles of music to be created. Try changing the tempo of your setTempo function and see what happens! Please make sure it is a number between 45-220.    Now that our tempo is set, it is time to add sounds. To do so, we must utilize the fitMedia() function.\n  Make sure the cursor in your program is between setTempo() and finish() functions.   Navigate to the Api Browser icon on the left side menu. Scroll through the list to the fitMedia() function.\n  Click on Paste icon on the right corner of fitMedia() to insert the function between the setTemp and finish functions.\n  You may notice that when you paste the function, Earsketch produces some placeholder texts that we will need to replace later. These placeholder texts are also known as parameters.\nYou can specify your own values for the following:\n fileName - Navigate to the 'Sounds' pane and find a sound you like. trackNumber - Select any positive integer as the track number. startLocation/endLocation - These parameters are quantified in measures. A measure is a segment of time which correlates to a specific number of beats.  If you are not sure what values to choose, try this: fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) Your code should now look something like this: from earsketch import *\\\\ init() setTempo(120)\\\\ fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17)\\\\ finish()   \n **Be careful:** Make sure the capitalization of the method call is correct. Most programming languages, Python included, are case sensitive. This means that adding capital letters can call a different function than expected. For example: `fitMedia()` is not the same as `FitMedia()`.   Once you have input your own parameters, press run, then click on play to listen to your audio clip!\nIf you see any red text, you have encountered some errors! Please ask for help. The fitMedia() function is the backbone to making music in Earsketch. We will be using this function a lot, so if you have any questions regarding its usage, please ask!\n  "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/css/","title":"CSS","tags":[],"description":"","content":"Style it with CSS Tags tell the browser what website elements to use. But we also need to tell it how to display the elements, and where to place them. We may want the title on the center or on the right side. We may want a picture on the right and a paragraph on the left. There are two ways we can do this: through HTML attributes or Cascading Style Sheets.\nCascading Style Sheets (CSS) HTML attributes are straight-forward but they can become messy quickly. If we wish to do a lot of styling, each HTML element can become long and hard to read. Furthermore, what if we want to style many elements the same way? We would have to copy all the attributes for each element, which is not efficient and prone to mistakes. For most styling, it’s better to use CSS.\nCSS files work closely with HTML tags. Each HTML tag can have a class attribute and/or an id attribute that helps to identify each element. Many elements can have the same class, and an element can have multiple classes. However, an element can only have one single id, and the id cannot be shared among elements. The CSS file uses these attributes to display styling specific to each class or id.\nSee this example below:\nSee the Pen Styling it up by Deliana Escobari (@Sunny-Dee) on CodePen.\n\rClick the \"HTML\" tab on the top left corner to see the HTML code, and the \"CSS\" tab to see the CSS code.\rLet\u0026rsquo;s take a look at the HTML code. Try to find a \u0026lt;div\u0026gt; tag with the attribute \u0026quot;info\u0026quot;. It looks like \u0026lt;div id=\u0026quot;info\u0026rdquo;\u0026gt;. By giving this div an id, we can then use CSS to specify styling for this specific element.\nSwitch over to the CSS file. We can also give styling to all elements of a specific type - for example, we could use CSS give all \u0026lt;p\u0026gt; elements the same style. In the header block, we tell the browser to color all the headers #0097A7 (which is the teal color).\nLet\u0026rsquo;s talk about the syntax (or the way of writing) for CSS. First, you start with what element you want to style. If you want to style all elements with the same tag (such as \u0026lt;header\u0026gt;), simply write the name. If you want to style an element with a class or id, put a . or a # in front of the class or id name respectively. Then, for each property you wish to change, use the format attribute-name: value;. Don\u0026rsquo;t forget to end each line with a ;. All these styles should be surrounded by the curly braces { and }.\nThere are way too many style elements to cover them all in this tutorial. If, in the sketch you made earlier, you aren\u0026rsquo;t sure how to use CSS to accomplish the desired styling, try searching online.\nWhile CSS understands 140 color names such as \"green\", \"red\", and \"blue\", this can still be limiting. What about if we want a dark green, or a slightly lighter green? To achieve this, we can also refer to colors in hexadecimal or RGB form. Check this link to see the colors and their corresponding hexadecimal form.\n\rAdding a new font  Let\u0026rsquo;s import the Heebo font from the internet. First we import the font at the top of the CSS file with this statement: @import url('https://fonts.googleapis.com/css?family=Heebo|Open+Sans'); Then we assigned it to the body tag. Since this tag will contain all the other HTML elements, our choice of font will be used for all elements.    Notice that the format inside the curly braces is: name: value;\n @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); \nfont-family: 'Roboto Mono', monospace; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Indie+Flower');\nfont-family: 'Indie Flower', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Pacifico'); \nfont-family: 'Pacifico', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Permanent+Marker');\nfont-family: 'Permanent Marker', cursive;    "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-4/","title":"Activity 4 - Simplifying code with functions","tags":[],"description":"","content":"We drew one hexagon. But this is just one of many hexagons Alex needs to build his honeycomb. Once again, it seems that we would have to repeat the code many times to draw multiple hexagons. Fortunately, we don\u0026rsquo;t have to! Functions to the rescue!\nFunctions A function is a way to group together lines of code to do something. For instance, turtle.forward(50) moves the turtle forward 50 steps, and turtle.left(120) turns the turtle left 120 degrees. What if we want to always do these two actions together? We can put them in a function called draw_line(), so that whenever this function is called, both of these actions take place simultaneously. Think of this like a recipe: we compile all the instructions together, and the recipe\u0026rsquo;s name is the food we are making.\n Here is an example of a function definition, and how we would use it:\ndef draw_line(): turtle.forward(50) turtle.left(120) The first line is called the function definition header. The def keyword tells the computer that we are defining a new function. Next, we give the function a name, in this case draw_line. Finally, don\u0026rsquo;t forget the (): at the end of the line, which tells the computer that we are starting the function body.\nExtra material - parameters Inside the parentheses () we would normally define parameters for the function. Parameters are inputs that we can give into the function, which the function can use to produce its output. For example, we must have two numbers to add them together and produce a result - the two numbers we used can be considered parameters. Today, we will not use parameters, and leave it as ().\n Similar to a for-loop, anything that we wish to define within the function needs to be preceded by 1 tab.\nIf you press run with just this code, you will notice that you won\u0026rsquo;t see any output! We\u0026rsquo;ve only created the functions, but we need to use them. To use the function we created, type in draw_line() again, but without the def.\ndef draw_line(): # Function definition turtle.forward(50) turtle.left(120) draw_line() # Function call This is called a function call for the draw_line() function. A function call runs the code that’s defined in the function with the same name. With the recipe analogy, think of it as actually performing the recipe.\nTips  Always make sure the names of your functions are descriptive enough to explain what the code in the function does. Your function call must be below the function definition. \n Tricky Python syntax - Part 2 Notice that functions use similar syntax rules with for-loops - you must have a : at the end of the function declaration, and anything in the function body needs to start with a tab.\nWhat happens when you need a for-loop inside of a function? Then, you need to combine the rules together! Here is an example on how to properly put a for-loop inside of a function.\ndef draw_line(): for i in range(3): turtle.forward(50) Notice that turtle.forward(50) has 2 tabs in front of it, because it is both inside of a function definition, and inside of a for-loop!\n So, let’s try that out by making our own draw_hexagon() function! Remember to include the function definition header, the number of sides a hexagon has, and the angle associated with a hexagon: 60 degrees.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-2/","title":"Activity 2","tags":[],"description":"","content":"Activity 2 Find // TODO (ACTIVITY 2) in the GuessTheWord code. For the Guess the Word game, we will give the computer a word bank, and the computer will choose one of the words randomly to use for the game. So far, we have added the words \u0026quot;Hello\u0026quot; and \u0026quot;World\u0026quot; to the word bank. However, a Guess the Word game with only two possible words to guess is not fun at all! Add at least 3 more strings to the word bank.\nNote: The console output will not change from the previous activity. We do not want to tell the player the words inside the word bank when they play the game! For this activity, just make sure that you do not get any error messages in the console after pressing run.\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/6-activity-2-make-a-song/","title":"Activity 2 - Make a song!","tags":[],"description":"Setting up headphones","content":"Now that you have learned how to add sounds to Earsketch, let\u0026rsquo;s try and make a song! You should already have one audio clip in Earsketch, but songs are made up of various instruments, so we need to add more audio clips.\n Add another fitMedia() call. Find an audio clip you would like to add to your current song and input it under the fileName parameter. The trackNumber parameter should be a unique number. This will allow us to place our sounds on different tracks. Having different sounds on different tracks allows us to maintain organization of our sounds and play different sounds at the same time. Example: If the first fitMedia() call is on track 1, the second fitMedia() call should be on track 2. Complete the rest of the parameters. Repeat these steps until you have four different audio sounds in your song.  Your code should now look something like this: from earsketch import *\\\ninit() setTempo(120)\\\nfitMedia(RD_TRAP_BELLLEAD_1, 1, 5, 9) fitMedia(YG_TRAP_STRINGS_2, 2, 1, 17) fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) fitMedia(YG_TRAP_BASS_9, 4, 1, 9)\\\nfinish() \n"},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/challenge-two/","title":"Challenge 2","tags":[],"description":"","content":"  Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below)\n  Add an id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt;\n  Toggle to the CSS tab #page-tigle\r{\rstyling here...\r} \n  Change the title color by adding color: yellow; inside the curly braces\n  Change the font by adding font-family: \u0026lsquo;Roboto Mono\u0026rsquo;, monospace; inside the curly braces and adding @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); at the top of the CSS tab\n  Try it yourself!\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-5/","title":"Activity 5 - Drawing a honeycomb","tags":[],"description":"","content":"This is the finale! Let\u0026rsquo;s create the honeycomb that Alex will live in. Fortunately, a honeycomb is simply 6 hexagons, so let\u0026rsquo;s combine our knowledge of functions and loops to make our honeycomb!\nIn this activity, create a new function called draw_honeycomb(). Inside the function body, create a loop that repeats 6 times. Inside the loop we have to first draw a hexagon using our draw_hexagon() function we previously defined. Next, move the turtle so it can draw the next hexagon. To do so, after the turtle draws each hexagon, we need to tell our turtle to move forward 50 pixels and then turn right 60 degrees.\nNote that the drawing of the honeycomb may take a while. You can change how fast the turtle draws the honeycomb by setting the turtle\u0026rsquo;s speed to a number between 1 and 10, 1 being the slowest and 10 being the fastest. Place this code near where we change the color of the turtle.\nturtle.speed(8)  "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/numbers/","title":"Numbers","tags":[],"description":"","content":"Numbers The computer can also do regular math that you see in school. Use Console.WriteLine to print out the result from the math expressions. No quotation marks are needed for numbers!\nConsole.WriteLine(5 + 4); Console.WriteLine(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:\n   Operator Description Operator Description     + Add \\ | Divide |    - Subtract % Modulo (remainder)   * Multiply (,) Parenthesis    Fun Fact: Computer Division The computer does division differently from your regular calculator. Computer division will exclude remainders or decimals. For example, 15 / 4 produces 3, and not 3.75.\n Working Together Try printing out the answers to the following to the console. Ensure your brackets are matched. Use a calculator (or mental math) to verify the computer produced the correct answer.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  \n Fun Fact: Random Numbers Here is how to print a random number between 1 (inclusive) and 10 (exclusive):\nRandom random = new Random(); Console.WriteLine(random.Next(1, 10)); Try to find where we use Random in the GuessTheWord game! However, the details as to how this works is complicated, so we will skip this discussion.\n "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/media-elements/","title":"Media Elements","tags":[],"description":"","content":"Media elements Add a GIF GIF stands for Graphic Interchange Format, but all you need to know is that it\u0026rsquo;s just another type of image file. The only difference is that the file has many images. When displayed in the browser, the images are played in sequence, similar to the frames of a movie. Think of it like one of those flip books that seem like the image is animated when you flip it.\n Add a video Aside from text and images, one of the most common things we like to add to websites are videos. Video files are very large, so it’s best to use a service to upload and display the video such as YouTube. Once uploaded to YouTube, how do we get it to play on our website? We use a special tag called an iframe\nIframes display HTML from other websites inside our own. It’s like a window, where you can see what is happening outside on the internet from inside the current website. This process is called embedding.\nFor example, the video below is an iframe from Benji’s Instragram:\n   View this post on Instagram        Push yourself to try new things! 🍉 I stick to the paleo diet most days (usually just the meat part) but on occasion I go for something crazy\nA post shared by Benji Escobari Marquez (@benjimite_thegudboi) on Aug 25, 2018 at 10:05pm PDT\n \rMany sites offer iframes to embed in your website. As an example, here is how you find the iframe code for a YouTube video:\nHere is a sample iframe Copy the following code: \u0026lt;iframe width=\u0026quot;560\u0026quot; height=\u0026quot;252\u0026quot; src=\u0026quot;https://www.youtube.com/embed/lQsqEBSGdyc\u0026quot; frameborder=\u0026quot;0\u0026quot; allow=\u0026quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026quot; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt;\nPaste it on your Code Pen and it will look like this:\n\r"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/part-2/","title":"Part 2 - Building a Mandala Flower","tags":[],"description":"","content":"Great job! You finished building a honeycomb for Alex’s beehive, but Alex needs to also get his pollen from flowers! Wouldn’t it be nice to add a flower to the picture as well? In part 2, we will be creating a mandala flower!\n(Stay tuned - we\u0026rsquo;ll show you what a mandala flower looks like.)\n"},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, \u0026ldquo;Are you a robot?\u0026quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false.\nWe can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for \u0026ldquo;equal to\u0026rdquo; and \u0026ldquo;not equal to\u0026rdquo;:\n   Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    As usual, use Console.WriteLine to print out your results:\nConsole.WriteLine(10 \u0026lt; 8); Console.WriteLine((3 * 6) == (32 - 14)); Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to check your answers.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026quot;Hello\u0026quot; + \u0026quot;World\u0026quot; == \u0026quot;Hello World\u0026quot; false == false  \n Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true.\nHere\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) || (\u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; == \u0026quot;he\u0026quot;) produces true since \u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; results in \u0026quot;he\u0026quot;, even though 8 is not less than or equal to 2. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4, produce false.  Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to print out the answers.\n (9 \u0026lt; 10) \u0026amp;\u0026amp; (12 =\u0026gt; 11) (15 - 2 == 11) || (4 % 3 != 2)  \n "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/7-activity-3-organize-songs-using-functions/","title":"Activity 3 - Organize your songs using functions","tags":[],"description":"Setting up headphones","content":"In Earsketch, functions are mostly used to organize different sections of a song. The most common musical form is A-B-A where each section is four measures in length, and the A sections sound different from the B section.\nNow that we learned how to use functions, let\u0026rsquo;s try to use them to organize our songs better.\n Define your function with a startMeasure parameter and endMeasure parameter. Place the sounds you would like to have the function represent underneath your function definition. Try to make multiple sections of a song (verse, chorus, intro, etc.) and define them with your functions. If you don\u0026rsquo;t do this, and only use multiple fitMedia calls, you will notice that your program will become long and hard to understand. To help avoid having a large project file, use functions!  Your code should now look something like this: from earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) \\\n# Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure)\n# Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure)\\\nsectionA(1, 9) sectionB(9, 17) sectionA(17, 25)\\\nfinish() \n Digital Audio Workstation (DAW) is the area which the sounds appear in. It is at the center top of your EarSketch window. The following is an example of how different sections of a song may look in the DAW. "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/challenge-three/","title":"Challenge 3 - Adding a GIF of Nuvi","tags":[],"description":"","content":" Follow this link to see the available GIFs Click on the one you like and select \u0026ldquo;Embed\u0026rdquo;  Copy the code from the white box below \u0026ldquo;GIF Embed Code\u0026quot;\n Paste the code anywhere in your page as long as it\u0026rsquo;s inside the \u0026lt;body\u0026gt; tags.\nTry it yourself!  "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-6/","title":"Activity 6 - Moving the turtle","tags":[],"description":"","content":"Our first step is to move the turtle to a new location to draw the flower (we don’t want to draw the flower on top of the beehive!). To do this, we first need to use the following methods:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() tells the turtle to pick up its pen so it doesn’t draw while it is moving. Then, with turtle.goto(x,y), we are telling the turtle the position where the turtle moves to. After that we tell the turtle to put its pen back down using turtle.pendown() so it can start drawing again.\nTip The x and y in the turtle.goto() method are the x and y coordinates of the turtle. We want to change the x and y coordinates of the turtle from (0, 0) which is center of the image, to somewhere a little further away so that the mandala flower doesn’t cover up part of the honeycomb.\n To complete this activity, move the turtle to position (300, 300) on the canvas. This will move it to the top-right corner.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/boolean-operators/","title":"Boolean Operators","tags":[],"description":"","content":"Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true.\nHere\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) || (\u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; == \u0026quot;he\u0026quot;) produces true since \u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; results in \u0026quot;he\u0026quot;, even though 8 is not less than or equal to 2. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4, produce false.  Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to print out the answers.\n (9 \u0026lt; 10) \u0026amp;\u0026amp; (12 =\u0026gt; 11) (15 - 2 == 11) || (4 % 3 != 2)  \n "},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/8-activity-4-add-effects-to-your-songs/","title":"Activity 4 - Add effects to your songs","tags":[],"description":"Setting up headphones","content":"Effects in EarSketch Effects allows the producer to alter the sound of the audio clip into its own unique sound. Similar to how we used fitMedia() to add new audio clips, we must use the setEffect() function to define specific effects for each audio clip. It is important to note that multiple effects can be placed on the same track. This allows for the producer to combine multiple effects together. Earsketch has many effects built-in. To reference all the effects, visit this link\nBefore we start adding effects to our song, let's breakdown the pieces of the two setEffect functions:  track: The track number to which the effect is applied to. Note: To apply an effect to the Master track, use 0 as the value for track. The master track is where all the audio is collectively played together. This is an easy way to apply an effect to all the sounds being processed. effectType: The specific effect being used effectParameter: The setting for the effect being used effectValue: The value applied to the effectParameter  This setEffect function is used to apply an effect to a specific track for the entire duration of the song, but what if you only want a specific section of your song to have an effect? Use the setEffect function with more parameters!  effectStartValue: The starting value applied to the parameter effectStartLocation: The measure at which the starting value is set effectEndValue: The ending value of the parameter effectEndLocation: The measure at which the ending value is set  This version of the setEffect allows for us to perform \u0026quot;automation\u0026quot; on a specific piece of our song. Automation is a way to change the value of an effect over time. One use of automation is to make a song fade in or fade out. To do so, we must adjust the GAIN effectParameter volume in the VOLUME effectType over time. For example, if we define our effectStartValue at -60 db and our effectEndValue at 0 db, it will sound like our song is fading in over time. To adjust the starting point and length of the effect, specify the effectStartLocation and effectEndLocation.\nAdd effects to your song Since we are more familiar with using effects, let\u0026rsquo;s add an effect to our song.\n On the API browser on the left, scroll to setEffect API. Insert a setEffect function call into your code, using the paste icon. We need to replace the parameters with our own values. Put an integer value for trackNumber. Let\u0026rsquo;s put 2. For the rest of the effect parameters, click on the eye icon on the setEffect API and you will see a link to \u0026ldquo;Every Effect Explained in Detail\u0026rdquo;. Click on it to open this section on the right side of your window. You may notice that Earsketch has many different variations of effects. By default, you should see section 30.4 BANDPASS on the right. For now, we will use the DELAY from section 30.4 as effectType in our setEffect function call. Now that we have chosen our effectType, we need an effectParameter. Navigate to section 30.4 on the right to check out different parameters supported for DELAY. Here is a picture of that section. We recommend using the DELAY_FEEDBACK.  For the final parameter, input a valid value. Since we have chosen DELAY_FEEDBACK, we must specify a number between -120.0 and -1.0 (as shown in the picture above). Example: Use -6.0 as your effect value for DELAY_FEEDBACK.  Your code should now look something like this:\nfrom earsketch import *\\\\ init() setTempo(120)\\\\ fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9)\\\\ \\# Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure)\\\\ \\# Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure)\\\\ sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) setEffect(2, DELAY, DELAY_FEEDBACK, -6.0) setEffect(2, DELAY, DELAY_TIME, 1200.0) setEffect(0, VOLUME, GAIN, -60, 1, 0, 3)\\\\ finish() \n "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/contact-form/","title":"Adding a Contact Form","tags":[],"description":"","content":"Finally, we will add a contact form to let people reach us if they are interested in Benji.\nMost browsers do not support sending emails directly from the contact form because it\u0026rsquo;s an easy way for trouble makers to send spam to users. Spam is an irrelevant or inappropriate message sent over the internet. Therefore, to send a form, we will use a free service called FormSpree. If we want the messages in the contact form to go to our email, we will first need to confirm it with FormSpree. This confirmation method keeps bad actors from just putting down anyone’s email in a contact form and spamming the victim.\nSee the Pen Contact Form by Deliana Escobari (@Sunny-Dee)\ron CodePen.\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-7/","title":"Activity 7 - Drawing a figure 8","tags":[],"description":"","content":"Great! Now let’s make a figure 8 as the first step to making a mandala flower! A figure 8 is just two circles that are opposite to each other. To do this we can make use of the turtle.circle(x) method, which takes an integer x as the radius of the circle. (You may recall that 2 * radius is how wide the circle is.) Having the radius as an argument means we can decide how big or small the circle should be.\n import turtle turtle.circle(50) In the above example, the circle is 100 pixels wide and the circle is drawn in a counterclockwise direction. If the argument to turtle.circle() is negative, then the circle is drawn in a clockwise direction and it is opposite to the original version.\nUsing this information, create a new function called figure_8() which draws a figure 8.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/variables/","title":"Variables","tags":[],"description":"","content":"Variables Variables are simply names that we can give to values such as strings, numbers and booleans. We use variables to store information that the computer can keep track of.\nHere\u0026rsquo;s how to declare a variable named str. We say str has the value \u0026quot;Hello World\u0026quot;. Can you describe what the other variables below mean?\nvar str = \u0026#34;Hello World\u0026#34;; var x = 88; var happy = true; Press run. Note that variables are not printed out to the console. Instead, the variable simply stores the string or number or boolean into the computer\u0026rsquo;s memory.\nWe can use these variables in other statements. For example, the following code would print Hello Nuevo Foundation to the console:\nvar str1 = \u0026#34;Hello\u0026#34;; var str2 = \u0026#34;Nuevo Foundation\u0026#34;; Console.WriteLine(str1 + \u0026#34; \u0026#34; + str2); You can change the value of a variable at any time by using the = operator again. If you\u0026rsquo;re changing a value of a variable, you don\u0026rsquo;t need to use var again. In the following example, Hola will be printed instead of Hello.\nvar str = \u0026#34;Hello\u0026#34;; str = \u0026#34;Hola\u0026#34;; Console.WriteLine(str); Here\u0026rsquo;s another example: 10 will be printed instead of 9.\nvar num = 9; num = num + 1; Console.WriteLine(num); Note that you CANNOT replace a string variable with a number or a boolean, and similarly for other combinations. The following example code will NOT work:\nvar happy = \u0026#34;Hello\u0026#34;; happy = 9; Another way to declare variables is to replace var with the type (string, int, bool) of variable you are creating. By declaring the type explicitly, you avoid the problem that we see above. For example:\nstring str = \u0026#34;Hello World\u0026#34;; int x = 88; bool happy = true; Note that var, string, int, or bool are special keywords in C#, so you cannot create variables with those names.\nWorking Together Let\u0026rsquo;s create two new variables:\n A variable named comp that stores the string \u0026quot;Computer\u0026quot;. A variable named five that stores the number 5.  Next, let\u0026rsquo;s use the variables to print out (Console.WriteLine) the following to the console. Let\u0026rsquo;s try to do this while using the variables!\nHint: we will use the + operator to combine strings together, and to also add numbers together.\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15   "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/challenge-four/","title":"Challenge 4","tags":[],"description":"","content":" Click on the try it yourself! button to open the editor Change the part that says \u0026lt;YOUR EMAIL HERE!\u0026gt; to your personal email if you have one. If you don\u0026rsquo;t, use email@nuevofoundation.org If you do, try to send a test message and see if it works Add any styling to the form. For example, try changing font or color of the form  Try it yourself!\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-8/","title":"Activity 8 - Creating a mandala flower","tags":[],"description":"","content":"We’re done creating our first figure 8! We can now use the figure_8() function to create a mandala flower! A mandala flower is many figure 8s placed on top of each other at different angles. So, to do this we need to use a\u0026hellip; you guessed it, a loop!\nCreate a new function called mandala_flower(). In the loop we will call the figure_8() function we wrote earlier to create a figure 8. Then, rotate the turtle either left or right a certain number of degrees (for example, 10 degrees). Repeat these steps many times to make a mandala flower; it’s a good idea to create a loop that repeats at least 35 times.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-3/","title":"Activity 3","tags":[],"description":"","content":"Activity 3 This activity is split into 2 parts and will test your knowledge about variables.\nActivity 3.1 At the start of the game, we should tell the player how many letters the word to guess has. For example, if the word to guess is \u0026quot;Hello\u0026quot;, we should tell the player: The word has 5 letters. We have already stored the number of letters in the numberOfLetters variable, so use it to complete this activity.\nTo check if you have completed this activity correctly, press run, and make sure you see The word has 5 letters (or some number other than 5) in the console.\nActivity 3.2 There are three pieces of information that we need the computer to store:\n The number of lives. The number of letters that the player has guess correctly so far. Whether or not the player won the game.  We will declare three variables to represent these pieces of information. Press run to make sure no errors appear in the console. Remember that variables do not produce console output, so for this part, we are only checking for the absence of errors.\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-earsketch/9-activity-5-fade-in/","title":"Activity 5 - Fade in","tags":[],"description":"Setting up headphones","content":"Now that you have one effect in your song, let\u0026rsquo;s try to fade in the introduction of our song.\n  Add another setEffect function call into your code, but ensure the following parameters are present:   Set the effectType to VOLUME.\n  Use the \u0026ldquo;Every Effect Explained in Detail\u0026rdquo; reference guide to see which parameters VOLUME has. To adjust the loudness of an audio clip, use the GAIN effectParameter.\n  If we want to make something sound like it is fading in, we must have the sound\u0026rsquo;s volume start at nothing and increase it until around 0 decibels. To do so, set effectStartValue at a very low value, and effectEndValue to be a higher value.\nHint: Volume is measured in decibels. In decibels, the more positive a number is, the louder it gets. Also, try not to exceed 0 decibels.\n  Set values for effectStartLocation and effectEndLocation to specify when to start and stop the fade in effect.\n  "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/challenge-five/","title":"Challenge 5","tags":[],"description":"","content":"Using what you\u0026rsquo;ve learned, let\u0026rsquo;s try to create a site that describes you! Try and use some or all of the following:\n A heading \u0026amp; paragraph tag Different fonts Different colors Add an image to your site A list Embed a gif or video  Show your style!\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-9/","title":"Activity 9 - Coloring your mandala flower","tags":[],"description":"","content":"Now that we have the shape of a mandala flower, it’s time to color it! We’re still going to use the turtle.color() method; however this time we’re going to use an RGB value instead of a string color value, so that we can produce a larger variety of colors.\nRGB (Red-Green-Blue) colors In primary school, you might recall that by mixing colors together, you can produce new colors. For example, combining red and blue together make purple. We can also change the amount of red and blue mixed together to create different shades of purple. The computer does something similar to produce colors. By combining various intensities of red, green, and blue, we can create different colors, such as powder blue, golden yellow, and salmon pink. Click here to see the colors and their corresponding hexadecimal form.\nIn the turtle.color() method, we can specify three integer arguments corresponding to the amount of red, green, and blue to mix. Each integer must be between 0 and 255 inclusive. One example can be turtle.color(30, 100, 238), which produces a dark shade of blue.\n Update your mandala flower to use a color of your liking. Feel free to experiment with different colors!\n "},{"uri":"https://thedanfernandez.github.io/workshops/python-basics/10-help/","title":"Help, I am stuck!","tags":[],"description":"Setting up headphones","content":"No worries! See if any of the following helps you, if not, feel free to reach out to one of us, and we will help you.  Indentation is very important when you are working in Python. Be careful of spaces \u0026amp; tabs in your code, because indentation errors can sometimes be pretty difficult to spot. However on the positive side, strict formatting makes Python code very clean and organized. Are all your variables, functions indented properly as instructed? SyntaxError: invalid syntax IndentationError: unexpected indent NameError: global name '---' is not defined Cannot recognize error: spelling mistake? TypeError: Can\u0026rsquo;t convert \u0026lsquo;int\u0026rsquo; object to str implicitly  "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/reading-from-console/","title":"Reading from Console","tags":[],"description":"","content":"Reading from Console Now that we know the basics about variables, we can now accept input from the user. Use the following line to tell the console to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called input.\nvar input = Console.ReadLine(); Here\u0026rsquo;s an example of how to use Console.ReadLine to accept user input:\nConsole.WriteLine(\u0026#34;Type in something:\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;You typed in: \u0026#34; + input); When the user presses run, the user is greeted with the following program:\nIn this case, after the user types in Hello World! into the console, the program finishes outputting to the console:\nWorking Together Write a program that first prints the following two lines to console:\nWelcome! How can I help you today? Afterwards, the console waits for user input. After the user types in something and presses Enter, the computer prints out:\nYou asked: [input]? I don't know the answer to that! Goodbye! [input] should be replaced with whatever the user had typed into the console.\n  "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/hosting/","title":"Hosting your website","tags":[],"description":"","content":"Host your site on the internet! Now that you\u0026rsquo;ve created your own personal website, let\u0026rsquo;s host it on the internet so everyone can access it! You will need a GitHub account to do so. If you don\u0026rsquo;t have one, create one here.\nOnce you have created your account and verified your email address, you will land on this page.\nNow, you will need to create a new repository to store the contents of your site! Think of a repository as a giant folder that can store lots of other files and folders for a given project. You can create one by selecting \u0026lsquo;Start a Project\u0026rsquo; or \u0026lsquo;Create a new repository\u0026rsquo;. Two very important things to keep in mind:\n Name your repo without any spaces. But you can use dashes or capitalization to replicate spaces! Check the box \u0026lsquo;Initialize this repository with a README'  Congratulations! You have created your first repo! Upload all your files and folders that belong to your site here. Now, when you go to your profile page, your new Repository will now show up under Repositories.\nAfter you\u0026rsquo;ve uploaded everything you created for your site, navigate back to the repo and select Settings.\nScroll all the way down to the GitHub Pages section.\nChange the Source from \u0026lsquo;None\u0026rsquo; to \u0026lsquo;master branch\u0026rsquo;. Save these changes and click the link at the top of the GitHub Pages section (in the example below, it would be https://exampleaccount1234.github.io/myFirstSite/). Now anyone can access your site with this link!\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-10/","title":"Activity 10 - Randomizing the color of your mandala flower petals","tags":[],"description":"","content":"We’ve successfully set the color of the mandala flower to an RGB value. Now, let\u0026rsquo;s explore changing the color of the individual mandala flower petals?\nWe will make use of python’s random library. The random.randint() method allows us to choose a random value for each of the red, green, or blue value. To choose a value that is between 0 inclusive and 256 exclusive (in other words, between 0 and 255 inclusive), we need to use random.randint(0, 256).\nUse random.randint(0, 256) three times to produce three random values, and plug them into the turtle.color() method. You should now be able to see a multi-colored mandala flower! This is definitely a flower from which Alex would be interested in collecting nectar!\n Congratulations! You helped Alex make a honeycomb and a flower! He can now happily live in his beehive, and make lots of honey! Your final image should look something like this:\n"},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-4/","title":"Activity 4","tags":[],"description":"","content":"Activity 4 This activity has four parts. This is a great time to use your knowledge of comments, numbers, variables, and reading from console to complete the 4 activities. Some background information for each activity is provided below, and hints are provided in the code. After each part, press run and make sure there are no errors present in the console.\nActivity 4.1 First, let\u0026rsquo;s introduce some more code into our game. Find the two lines of code which start with TODO (ACTIVITY 4.1) (one is at approximately line 60, and the other at approximately line 130). Delete both lines of code entirely. This unlocks the main behavior of the game, such as checking if the letter guessed by the player is found in the word to guess.\nUnfortunately, after pressing run, it seems like the game does not wait for user input, and continuously guesses 'C' instead! This is no good, so let\u0026rsquo;s fix this in the next part.\nActivity 4.2 When the player makes a guess, we need to take the guessed letter and store it in a variable. The variable will be used to check if the letter appears in the word to guess. Use Console.ReadLine to wait for user input and store the user input in the input variable. Note: we have already declared the variable input already, so you do not need to use the var keyword.\nTo check if you have done this correctly, press run, and you should now be able to type in a letter into the console.\nActivity 4.3 Every time a letter is guessed correctly, we need to increment (add one to) the number of correctly guessed letters. Use the lettersRevealed variable to change the number of correctly guessed letters. Press run to make sure no errors occur. We have also provided some code to print out the value of the lettersRevealed variable for testing purposes. Make sure to delete this when you are done testing, since this is something we do not want to reveal to the player!\nActivity 4.4 Every time a letter is guessed incorrectly, the player loses a life. Decrement (subtract one from) the number of lives, using the lives variable. We will also tell the player how many lives they have remaining, when they make an incorrect guess, by printing the number of lives to the console. Check if you have done this correctly by pressing run, guessing an incorrect letter, and seeing if the correct number of lives are displayed on the console.\nFun Fact - Bugs Recall in Activity 4.1 that after uncommenting some code, we experienced some unexpected behavior. Any problems or unexpected behaviors in the program are called \u0026ldquo;bugs\u0026rdquo;. We fixed the bug introduced in Activity 4.1 by introducing user input in Activity 4.2.\nEven if you implemented everything correctly in the previous parts, if you keep playing for a while, another issue still occurs. What is it? We will fix this bug in Activity 6.\n "},{"uri":"https://thedanfernandez.github.io/workshops/web-basics/in-case-youre-wondering/","title":"In case you were wondering","tags":[],"description":"","content":"You might be concerned about Benji, but we are happy to tell you that he found his home through a website just like the one you are building. Benji is now a full time good boy working hard on his tricks to earn treats.\n"},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/activity-11/","title":"Activity 11 - Now, it&#39;s your turn!","tags":[],"description":"","content":"If there is any time left, try drawing your own shapes and designs! Make your picture interesting using various shapes and colors.\nClick here to open a new blank repl.it window to start on your creation.\nHelp, I am stuck! Stuck? Check the Answer key for the activity that you are stuck on!\n### INTRODUCTION import turtle # This is a comment. Add your code below this line. turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) -- ### ACTIVITY 1 import turtle turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) # Activity 1 - Draw a square. Add your code below this line. turtle.forward(50) turtle.right(90) turtle.forward(50) turtle.right(90) turtle.forward(50) turtle.right(90) turtle.forward(50) turtle.right(90) -- ### ACTIVITY 2 import turtle turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) # Activity 2 - Change the following code to draw # a square, instead of a triangle. for i in range(4): turtle.forward(50) turtle.right(90) -- ### ACTIVITY 3 import turtle turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) # Activity 3 - Draw a hexagon, using a for-loop. # Add your code after this line. for i in range(6): turtle.forward(50) turtle.right(60) -- ### ACTIVITY 4 import turtle # Activity 4 - Define a function below called # draw_hexagon, and use your code from Activity 3. def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.right(60) # Do not delete the following lines of code. turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) draw_hexagon() -- ### ACTIVITY 5 import turtle def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) # Activity 5 - Define a new function below called # draw_honeycomb that draws a honeycomb. # HINTS: # - Start off with a for loop that repeats 6 times. # - Draw a hexagon using draw_hexagon # - Move the turtle forward 50 pixels # - Turn the turtle right 60 degrees def draw_honeycomb(): draw_hexagon() turtle.forward(50) turtle.right(60) # Do not delete the following lines of code: turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) # If you want the turtle to move faster, uncomment # the line of code below: # turtle.speed(8) draw_honeycomb() -- ### ACTIVITY 6 import turtle def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) turtle.speed(8) draw_honeycomb() # Activity 6 - After drawing the honeycomb, # move the turtle to position (300, 300) on # the canvas, without drawing extra lines. # Add your code below. turtle.penup() turtle.goto(300, 300) turtle.pendown() -- ### ACTIVITY 7 import turtle def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) # Activity 7 - Define a new function called # figure_8 which draws a figure 8. # HINT: draw two circles, one going in # counterclockwise direction, the other # going in the clockwise direction. def figure_8(): turtle.circle(50) turtle.circle(-50) # Do not delete the following lines of code. turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) turtle.speed(8) draw_honeycomb() turtle.penup() turtle.goto(300, 300) turtle.pendown() figure_8() -- ### ACTIVITY 8 import turtle def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) def figure_8(): turtle.circle(50) turtle.circle(-50) # Activity 8 - Define a new function called # mandala_flower which draws a mandala flower. # HINTS: # - Use a for-loop which repeats at least 35 times. # - Each time the loop runs, draw a figure 8, and # then rotate the turtle slightly. def mandala_flower(): for i in range(35): figure_8() turtle.right(10) # Do not delete the following lines of code turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) turtle.speed(8) draw_honeycomb() turtle.penup() turtle.goto(300, 300) turtle.pendown() mandala_flower() -- ### ACTIVITY 9 import turtle def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) def figure_8(): turtle.circle(50) turtle.circle(-50) def mandala_flower(): for i in range(35): figure_8() turtle.right(10) # Do not delete the following lines of code. turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) turtle.speed(8) draw_honeycomb() turtle.penup() turtle.goto(300, 300) turtle.pendown() # Activity 9 - Set the turtle's color using an RGB # value here: turtle.color(30, 100, 160) mandala_flower() -- ### ACTIVITY 10 import turtle import random def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) def figure_8(): turtle.circle(50) turtle.circle(-50) # Activity 10 - Update the following mandala_flower # function so that each time the loop runs, the # turtle changes color to a new random color. # HINTS: # - Use turtle.color, and pass in three arguments # into the method. # - Generate three random numbers, one for each # value of RGB. # - Remember that we need to change the color # each time we run the loop. def mandala_flower(): for i in range(35): turtle.color(random.randint(0, 256),random.randint(0, 256), random.randint(0, 256)) figure_8() turtle.right(10) # Do not delete the following lines turtle.speed(0) turtle.shape(\u0026quot;turtle\u0026quot;) turtle.color(\u0026quot;orange\u0026quot;) draw_honeycomb() turtle.penup() turtle.goto(300, 300) turtle.pendown() mandala_flower() "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/if-else-statements/","title":"If-else statements","tags":[],"description":"","content":"If-else statements You can use if statements to run code statement only if certain conditions are met. Here is an example:\nvar myNum = (93 + 41) / 12; if (myNum == 11) { Console.WriteLine(\u0026#34;They are equal!\u0026#34;); } Inside the () beside if, you should specify a boolean expression. If the expression is true, the code inside { } is executed. In this case, since myNum is equal to 11, They are equal! is printed.\nIf the condition is false, nothing happens! For example, since 10 is not greater than 11, Print me! will not show up to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } Use else to tell the computer what to do if the condition is false. In this example, now I got printed instead! will be printed to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } else { Console.WriteLine(\u0026#34;I got printed instead!\u0026#34;); } You can chain many cases together using else if. Note that when using else if, only the first case will be evaluated. For example, in the following code snippet, Statement 1 will be printed. We will skip the check that sad == 4 and Statement 2 will not be printed, even though sad == 4 is true.\nvar sad = 4; if (sad \u0026lt; 9) { Console.WriteLine(\u0026#34;Statement 1\u0026#34;); } else if (sad == 4) { Console.WriteLine(\u0026#34;Statement 2\u0026#34;); } else { Console.WriteLine(\u0026#34;Statement 3\u0026#34;); } You can also place if statements inside other if statements for some interesting behavior:\nvar num1 = 10; var num2 = 20; if (num1 \u0026lt; num2) { if (num2 \u0026lt; 30) { Console.WriteLine(\u0026#34;Hello!\u0026#34;); } else { Console.WriteLine(\u0026#34;Hola!\u0026#34;); } } Working Together Let\u0026rsquo;s write a program that first prints the following line to console:\nIs coding fun? Afterwards, the console waits for user input.\n If the user enters yes, the computer prints out Yes, I'm glad you're enjoying it!. If the user enters no, the computer prints out Oh no, that's too bad!. Otherwise, the computer prints out: I don't understand you! Goodbye!.    Fun Fact: Switch statements Using multiple if, else statements could get very long and confusing. You can use switch statements instead if you want to compare a single variable against multiple values. For example, the Working Together activity can be completed using the following piece of code:\nvar input = Console.ReadLine(); switch (input) { case \u0026#34;yes\u0026#34;: Console.WriteLine(\u0026#34;Yes, I\u0026#39;m glad you\u0026#39;re enjoying it!\u0026#34;); break; case \u0026#34;no\u0026#34;: Console.WriteLine(\u0026#34;Oh no, that\u0026#39;s too bad!\u0026#34;); break; default: Console.WriteLine(\u0026#34;I don\u0026#39;t understand you! Goodbye!\u0026#34;); break; } Each case represents a possible value that the variable input might take. Make sure you use the break statement to tell the computer that you have completed all the actions associated with this case.\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-5/","title":"Activity 5","tags":[],"description":"","content":"Activity 5 This activity is split into two parts. Use your knowledge of if-else statements to complete the activities. As always, press run after completing each part to check for errors.\nActivity 5.1 After the player guesses a letter, and we have checked whether the letter appears in the word, we need to check if the entire word has been guessed. If the entire word has been correctly identified, we should let the computer know that the player has won the game. Use an if-statement to change the value of the won variable only if the number of letters correctly guessed equals the number of letters in the word to guess.\nActivity 5.2 At the end of the game, we should let the player know if they won or lost the game.\n If the player has won the game, print out to console You won!. Else, tell the player that they lost, and print out the correct answer. For example, if the player could not guess the correct answer \u0026quot;Hello\u0026quot;, print out You lost! The answer was 'Hello'.  To test both parts of the activity, set the word bank to only contain one two-letter word (see Activity 2 if you forget how to do this). Press run, and correctly guess the word when playing the game. Make sure You won! is printed out. Run again, and check that You lost!is printed out when you lose the game.\n"},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/while-loops/","title":"While loops","tags":[],"description":"","content":"While loops while loops are an easy way to repeat the execution of lines without having to reuse a line many times. For example, to print Hello World five times in a row, you can do:\nvar counter = 1; while (counter \u0026lt;= 5) { Console.WriteLine(\u0026#34;Hello World\u0026#34;); counter = counter + 1; } Like an if statement, inside the () beside while, you should specify a boolean expression. If the expression is true, the code inside the curly braces { } is executed. However, after everything inside the curly braces is executed, we go back to the top of the while loop and check the boolean expression again. If the boolean expression continues to be true, the loop will be repeated.\nYou can also place if statements in while loops to do some interesting behavior:\nvar counter = 1; while (counter \u0026lt;= 10) { if (counter \u0026lt; 5) { Console.WriteLine(\u0026#34;Smaller than 5!\u0026#34;); } else { Console.WriteLine(\u0026#34;Greater than or equal to 5!\u0026#34;); } counter = counter + 1; } Here is an example of an infinite loop - do you see what\u0026rsquo;s wrong? What can you do so that the following piece of code prints Spam! only 100 times?\nvar counter = 100; while (counter \u0026gt; 0) { Console.WriteLine(\u0026#34;Spam!\u0026#34;); } Working Together Take your code from the previous activity. Let\u0026rsquo;s expand the code so that instead of the program finishing after the user inputs once, allow the user to answer the question 10 times before exiting. Be careful about infinite loops!\n "},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-6/","title":"Activity 6","tags":[],"description":"","content":"Activity 6 - Completing the game! Now, let\u0026rsquo;s finally address the bug that was introduced in Activity 4.2. The game should continue to ask the player to guess letters if they have some lives remaining, and they have not yet won the game. Look at the for loop. As you might have noticed, even though you might have lives remaining, the game abruptly stops after only 3 guesses. We will replace this for-loop with a while-loop, with the correct looping condition. Use the given hint to complete the activity.\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/","title":"Shortcodes","tags":[],"description":"","content":"A bunch of Shortcodes are available with this theme :\n alert The alert shortcode allows you to highlight information in your page.\n\n attachments The Attachments shortcode displays a list of files attached to a page.\n\n button Display an actionable button in your page.\n\n children List the child pages of a page\n\n expand Displays an expandable/collapsible section of text on your page\n\n icon Display an icon.\n\n mermaid Flowchart example Show code \u0026hellip; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt; {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Hard edge] \u0026ndash;\u0026gt;|Link text| B(Round edge) B \u0026ndash;\u0026gt; C{Decision} C \u0026ndash;\u0026gt;|One| D[Result one] C \u0026ndash;\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt; mermaid.initialize({startOnLoad:true}); graph LR; A[Hard edge] \u0026ndash;|Link text| B(Round edge) B \u0026ndash; C{Decision} C \u0026ndash;|One| D[Result one] C \u0026ndash;|Two| E[Result two] With sub-graphs and some style Show code.\n\n notice Disclaimers to help you structure your page\n\n panel Allow you to highlight information or put it in a box.\n\n "},{"uri":"https://thedanfernandez.github.io/workshops/python-turtle/old/","title":"Python Turtle Spanish","tags":[],"description":"Workshop description goes here","content":"Python con Turtle Introducción Bienvenidos al mundo de Nueva Colmena! Llegaste justo a tiempo para ayudar a nuestra abeja bebé Alex.\nAlex vive en un país llamado Isla Tortuga. Los habitantes de Isla Tortuga hablan un lenguaje llamado Python. Vamos a usar este lenguaje para enseñar a Alex cómo vivir en una colmena. ¿Estás listo para jugar?\nPart 1 - Construyendo la colmena Para que Alex pueda vivir en una colmena, necesita aprender a construir un panal. Vamos a usar una biblioteca de Python que se llama turtle para dibujar el panal.\nUsing Repl.it Vamos a utilizar la herramienta Repl.it para jugar con nuestros códigos Python. Este es un ejemplo de una ventana interactiva como las que usaremos en todo el tutorial:\n Antes de empezar, entendamos como funciona esta ventana. El programa main.py contiene las intrucciones que la computadora va a ejecutar o \u0026ldquo;correr\u0026rdquo; (Run en inglés). Al presionar el botón Run, le estás diciendo a la computadora que ejecute las instrucciones que están en el programa. Los resultados del programa los puedes ver en la pantalla blanca que está debajo, en la pestaña result\nAhora explicaremos parte del código que tenemos en el archivo main.py\nBibliotecas (Library) e instrucciones \u0026ldquo;import\u0026rdquo; Mira el inicio del código. Ahí puedes ver la siguiente línea\nimport turtle Esta instrucción nos permite toda la funcionalidad para dibujar que proporciona la biblioteca turtle. Una biblioteca es el lugar donde se agrupan en Python las instrucciones relacionadas a un tema en particular. Hay bibliotecas para hacer documentos, otras para conectarse a internet, otras para hacer operaciones matemáticas. turtle es una biblioteca para dibujar y que podemos controlar a través de las instrucciones que le demos.\nComentarios (Comments) La línea gris que empieza con # se llama comentario. Estos son notas en el código que nos ayudan a explicar qué está pasando. Como los comentarios son ignorados por la computadora, suelen ser usados para que otros puedan entender lo que nuestro código está haciendo.\n Introducción - Dibujando una línea de color Ante de que Alex pueda aprender a crear una colmena, él debe aprender primero cómo dibujar una línea. Haremos esto en dos partes.\nPrimero, necesitamos decirle a la tortuga qué color queremos usar para dibujar la línea. Para hacerlo de color naranja (orange in inglés) esta es la instrucción:\nturtle.color(\u0026quot;orange\u0026quot;) Intentemos entender esta línea de código en más detalle.\nCadenas (Strings) Todo lo que veas entre comillas \u0026ldquo;\u0026quot; se llama cadena o string. Un string es solo una secuencia de caracteres, es decir, de números, letras o símbolos.\nEn el código que escribimos arriba \u0026quot;orange\u0026quot; es un string. Otros ejemplos de string pueden ser \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; o \u0026quot;green\u0026quot;. ¡Ojo!, 123, abc! and green NO son strings ¡porque no tienen comillas!arks!\nMétodos turtle.color() es un método. Usamos los métodos para hacer que la tortuga haga ciertas acciones. En este caso, turtle.color() está cambiando el color con el que va a dibujar. Nosotros le dijimos que cambiara su color original por naranja (orange) cuando mandamos el string \u0026quot;orange\u0026quot; como un argument.\nArgumentos Los argumentos son los valores que le pasamos a los métodos. En nuestro ejemplo, turtle.color() necesita un argumento que represente el nombre del color que va a usar la tortuga, así que pasamos \u0026quot;orange\u0026quot; como un argument al método. Podríamos usar otro color pero tiene que ser un color que el método entienda. Los colores que reconoce son \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, y \u0026quot;gray\u0026quot;. Si mandamos algún color diferente, el método no lo reconocerá y usará el color que tenía al inicio: negro.\n Ahora que ya escogimos el color que queremos, ¡ya podemos dibujar la línea! Para dibujar la línea tenemos dos métodos que podemos usar:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) hará que la tortuga se mueva hacia adelante 50 pixeles y dibujará la línea en esa dirección mientras que turtle.backward(50) hará lo mismo pero hacia atrás.\nPixeles Una imagen está compuesta por miles o millones de pixeles. Un pixel es una unidad de medida para las imagenes digitales. Imagínalo como cada uno de los pequeños puntos de los que está hecha una imagen.\nEnteros (Integers) Un integer es sólo un número, ya sea negativo o positivo. En nuestro ejemplo, tanto turtle.forward() como turtle.backward() necesitan un entero como argumento. Cuando escogimos el color necesitabamos un string pero esta vez necesitamos un entero. Esto es porque el argumento representa el número de pixeles que se moverá la tortuga en la dirección que le indicamos. No tendría sentido decirle que se mueva \u0026quot;orange\u0026quot; pixeles, ¿o sí?\nPara que la tortuga se mueva hacia adelante el código debería verse así:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Copia las líneas de arriba, pégalas en el archivo main.py que teníamos al inicio, y da click en Run.\n Como ejercicio, trata de entender que hace la siguiente línea de código. Después pégala al final del archivo main.py y vuélvelo a correr.\nturtle.shape(\u0026quot;turtle\u0026quot;) ¡AYUDA! No se ve nada en la pantalla Si, después de presionar el botón Run, no logras ver nada en la pestaña result, revisa si hay una x roja en la pestaña console. Si la ves, es porque tienes errores en el código. Pídele ayuda al instructor par revisar tu código.\nMientas tanto puedes revisar lo siguiente:\n No uses letras mayúsculas. Asegúrate que ninguna línea que hayas escrito tenga espacios al inicio. Revisa que el color que hayas escogido esté entre comillas y que esté entre os paréntesis del commando turtle.color().   Actividad 1 - Dibujando un cuadrado ¡Muy bien! Has ayudado a Alex a dibujar una línea. Ahora demos un paso más y dibujemos un cuadrado. Para dibujarlo, necesitamos seguir los siguientes pasos:\n Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles.  Recuerda que debes usar turtle.forward() para dibujar líneas. Para girar 90 grados necesitas pasar 90 como argumento al método turtle.left():\nturtle.left(90)  Activity 2 - Simplificando el código con ciclos (loops) ¡Genial! Dibujaste un cuadrado. ¿Pero notas cómo estamos escribiendo las mismas líneas una y otra vez? Tuvimos que repetir las instrucciones para dibujar una línea y dar la vuelta cuatro veces. ¿No sería genial que en vez de dar todas las instrucciones le dijeramos al programa que repita cuatro veces lo qu ele dijimos? ¡Intentémoslo!\nPara hacer esto tenemos que usar CICLOS. Un ciclo ejecuta un grupo de instrucciones varias veces. Miremos este ejemplo donde se hace un triángulo:\nfor i in range(3): turtle.forward(50) turtle.left(120) Intentemos entender lo que hace este código. for i in range(3): esta sentencia le dice al programa que las intrucciones que están debajo deben correrse dentro de un ciclo. range(3) dice cuántas veces va a repetirse el código (3 veces en este caso). La letra i es una variable y la usamos para llevar la cuenta de cuántas veces hemos corrido el ciclo.\nLa sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 1 La Sintaxis es la forma en que escribimos los programas para hacerlos entendibles. Cuando hablamos español tenemos reglas (ortografía, gramática, etc) para podernos entender. El lenguaje Python tiene algo parecido para que la computadora pueda entender el código que escribimos.\nPrimero, notemos que al final de la línea que empieza con for agregamos dos punts (:); esto significa que la siguiente línea será parte del ciclo for. Si no ponemos los dos puntos, la computadora no sabrá qué hacer.\nFíjate que la siguiente línea tiene unos espacios en blanco, un \u0026ldquo;tab\u0026rdquo; le llamamos. Este tab le dice a la computadora que las sentencias deben de considerarse dentro del ciclo.\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nPara dar en ejemplo de lo improtante que es poner el tab, veamos el siguiente código. Podemos ver que le quitamos el tab a la línea turtle.left(120) así que el código no funcionará como esperamos. El código repetirá la línea turtle.forward(50) tres veces y obteneremos una larga línea recta.\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Bueno, ahora tomemos el código que teníamos y modifiquemoslo un poco para dibujar un cuadrado en vez de un triángulo. Como pista, puedes volver a revisar lo que hicimos en la Avtividad 2.\n Actividad 3 - Dibujar un hexágono ¡Buen trabajo! Acabas de dibujar tu primera figura con Python y Turtle. Hagamos otros pequeños cambios al código que escribimos para hacer el cuadrado e intentemos hacer un hexágono. Alex es una abeja así que después de todo, él necesita dibujar hexágonos para crear su colmena.\nPiensa en cuántos lados tiene un hexágono. Si divides los 360° que tiene un círculo entre el número de lados del hexágono, tendrás los grados del ángulo para hacer tu nueva figura.\n Actividad 4 - Simplificando el código con funciones Ya dibujamos un hexágono. Pero es sólo uno de los muchos que necesita para construir su colmena. Una vez más parece we tendríamos que repetir el código varias veces para dibujar muchos hexágonos. Afortunadamente no tenemos qué hacerlo. ¡Las funciones vienen a nuestro rescate!\nFunciones Una función es una manera de agrupar líneas de código para hacer algo. Por ejemplo, turtle.forward(50) mueve la tortuga hacia delante 50 paso y turtle.left(120) gira la tortuga 120 grados hacia la izquierda. ¿Y qué pasaría si siempre quisieramos hacer esas dos cosas juntas? Podríamos ponerlas en una función que se llame draw_line() para que cada que mandemos llamar a esa función esas dos acciones juntas sucedan.\n Este es un ejemplo de la definición de funcion y cómo se usa\ndef draw_line(): turtle.forward(50) turtle.left(120) La primera línea se llama cabecera o header. La palabra def le dice a la computadora que estamos definiendo una función. Después le pone a la función un nombre, en este caso draw_line. Finalmente, no olvidemos esto que va al final: ():, que le dice a la computadora que estamos empezando el cuerpo de la función.\nMaterial extra : Parámetros Dentro de los paréntesis () solemos poner los parámetros de la función. Un parámetro es un dato de entrada que le damos a la función para que esta la use para generar una salida. Por ejemplo, para hacer una suma necesitamos dos dígitos. Cada uno de estos dígitos sería un parámetro. En nuestro ejemplo no vamos a usar parámetros así que vamos a dejar los paréntesis en blanco.\n Similar a un ciclo for, lo que sea que queramos que la función ejecute debe tener un tab el inicio.\nPero no basta sólo con crearla sino que hay que mandarla llamar. Esto se hace escribiendo el nombre de la función seguido de paréntesis:\ndef draw_line(): turtle.forward(50) turtle.left(120) draw_line() # Aquí llamamos a la función A esto se le llama una llamada de la función draw_line(). Una llamada corre el código que tiene dentro la función que estamos invocando.\nSi nos imaginamos la función como una recete, una llamada a una función es como hacer la receta.\nTips  Siempre asegúrate de que los nombres de tus funciones sean descriptivos. Es decir que digan qué hace la función. Las llamadas a tu función siempre deben estar escritas más abajo que la definición de tu función. \n La sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 2 Notemos que las funciones usan una sintaxis similar a la que usan los ciclos for: tienes que poner el símbolo : al final de la línea donde se declara la función y todas las líneas que estén dentro de la función deben empezar con dos espacios.\n¿Pero qué pasaría si necesitaramos un ciclo for dentro de nuestra función? Entonces hay que combinar las reglas. A continuación hay un ejemplo de cómo poner un ciclo for dentro de una función:\ndef draw_line(): for i in range(3): turtle.forward(50) ¿Te fijas cómo la línea turtle.forward(50) tiene dos tabs al inicio? Esto es porque ocupa un tab por estar dentro del ciclo for y otro tab por estar dentro de la función.\n Intentemos ahora crear nuestra propia función y llamémosla draw_hexagon(). Recuerda incluir la cabecera o header dela función, el número de lados que tiene un hexágono y el ángulo que debes usar: 60 grados.\n Actividad 5 - Dibujar la colmena ¡Llegamos a la prueba final! Vamos a crear la colmena para que Alex viva en ella. Afortunadamente una colmena es cimplemente 6 hexágonos así que podemos usar lo que ya aprendimos sobre funciones y ciclos para crear la colmena.\nEn esta actividad primero crearemos una función llamada draw_honeycomb(). Dentro del cuerpo de esta función pondremos un ciclo que se repita seis veces. Dentro del ciclo dibujaremos el primer hexágono con la función draw_hexagon() que ya tenemos construida. Ahora, movamos la tortuga un poco para que pueda pintar el siguiente hexágono. Para hacer eso necesitamos decirle al programa que al terminar de dibujar el hexágono se mueva hacia adelante 50 pixeles y luego gire a la derecha 60 grados.\nDibujar la colmena puede tomar un rato. Para que la tortuga vaya más rápido puedes modificar la velocidad a la que se mueve. Las velocidades van del 1 al 10 donde 1 es la más lenta y 10 la más rápida. Pon el siguiente código justo debajo de donde está la línea que cambia el color de la tortuga.\n turtle.speed(8)  Parte 2: Construyendo una Flor de Mandala ¡Buen Trabajo! Terminaste de construir un panal para la colmena de Alex, pero ¡Alex también necesita conseguir polen de las flores! ¿No seria agradable también agregar una flor a la imagen? En la parte 2, ¡crearemos una flor de mandala! (Permanece atento - te mostraremos como luce una flor de mandala.)\nActividad 6 - Moviendo la tortuga Nuestro primer paso es mover la tortuga a una nueva posición para dibujar la flor (¡no queremos dibujar la flor encima de la colmena!). Para hacer esto, primero necesitamos usar los siguientes métodos:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() le dice a la tortuga que levante su pluma para que no dibuje mientras se mueve. Entonces, con turtle.goto(x,y), le estamos diciendo a la tortuga la posición donde debe moverse. Después de eso le decimos a la tortuga que vuelva a bajar su pluma usando turtle.pendown() para que pueda comenzar a dibujar nuevamente.\nPista La x y la y en el método turtle.goto() son las coordenadas x y y de la tortuga. Queremos cambiar las coordenadas x, y de la tortuga desde (0, 0) que es el centro de la imagen, a algún lugar un poco mas lejos para que la flor de mandala no cubra parte de la colmena.\n Para completar esta actividad, mueve a la tortuga a la posición (300, 300) sobre el lienzo. Esto la moverá a la esquina superior derecha.\n Actividad 7 - Dibujando una figura 8 ¡Excelente! Ahora hagamos la figura de un 8 como primer paso para hacer una flor de mandala! Una figura de un 8 son solo dos círculos opuestos entre sí. Para hacer esto podemos hacer uso del método turtle.circle(x), el cual toma un entero x como el radio del círculo. (Puede recordar que radio * 2 es que tan ancho es el circulo.) Tener el radio como un argumento significa que podemos decidir qué tan grande o pequeño debe ser el círculo.\n import turtle turtle.circle(50) En el ejemplo anterior, el círculo es de 100 píxeles de ancho y es dibujado en sentido contrario a las manecillas del reloj. Si el argumento para turtle.circle() es negativo, entonces el círculo se dibuja en dirección de las manecillas del reloj y es opuesto a la versión original.\nUsando esta información, crea una nueva función llamada figure_8() que dibuje una figura de un 8.\n Actividad 8 - Creando una flor de mandala Hemos terminado de crear nuestra primera figura de un 8! Ahora podemos usar la función figure_8() para crear una flor de mandala! Una flor de mandala es muchas figuras 8 puestas encima de otras en ángulos diferentes. Entonces, para hacer esto necesitamos usar un\u0026hellip; lo has adivinado, un ciclo!\nCrea una nueva función llamada mandala_flower(). En el ciclo llamaremos la función figure_8() que escribimos anteriormente para crear una figura de un 8. Luego, hay que girar la tortuga a la izquierda o derecha un cierto número de grados (por ejemplo, 10 grados). Repita estos pasos muchas veces para hacer una flor de mandala; es una buena idea crear un ciclo que se repita al menos 35 veces.\n Actividad 9 - Coloreando tu flor de mandala Ahora que ya tenemos la forma de una flor de mandala, ¡es momento de colorearla! Aun vamos a utilizar el método turtle.color(); sin embargo esta vez vamos a utilizar un valor RGB en lugar un valor de color en cadena de texto, así que podemos producir una gran variedad de colores.\nColores RGB (Red-Green-Blue) En la escuela primaria, puede que recuerdes que al mezclar colores, puedes producir nuevos colores. Por ejemplo, la combinación de rojo y azul hace el purpura. También podemos cambiar la cantidad de rojo y azul mezclados para crear diferentes tonos de purpura. La computadora hace algo similar para producir colores. Al combinar varias intensidades de rojo, verde y azul, podemos crear colores más variados, tal como como azul polvo, amarillo dorado y rosa salmón. Click aqui para ver los colres y su forma correspondiente en hexadecimal.\nEl el método turtle.color(), podemos especificar argumentos enteros correspondientes a la cantidad de rojo, verde y azul a mezclar. Cada número entero debe estar entre 0 y 255 inclusivos. Un ejemplo puede ser turtle.color(30, 100, 238), que produce un tono azul oscuro.\n Actualiza tu flor de mandala para usar un color de tu preferencia. ¡Siéntete libre de experimentar con colores diferentes!\n Actividad 10 - Randomizar el color de los pétalos de tu flor de mandala Hemos establecido con éxito el color de la flor de mandala en un valor RGB. Ahora, exploremos cambiar el color de los pétalos individuales de la flor de mandala\nHaremos uso de la biblioteca random de python. El método random.randint() nos permite elegir un valor aleatorio para cada uno de los valores rojo, verde o azul. Para elegir un valor que esté entre 0 inclusivo y 256 exclusivo (en otras palabras, entre 0 y 255 inclusivo), necesitamos usar random.randint(0, 256).\nUsa random.randint(0, 256) tres veces para generar tres valores aleatorios y utilizalos en el método turtle.color(). ¡Ahora deberías poder ver una flor de mandala multicolor! ¡Esta es definitivamente una flor de la que Alex estaría interesado en recolectar néctar!\n ¡Felicidades! ¡Ayudaste a Alex a hacer un panal y una flor! ¡Ahora puede vivir feliz en su colmena y hacer mucha miel! Su imagen final debería verse así:\nActividad 11 - Ahora es tu turno! Si queda algo de tiempo, ¡Intenta dibujar tus propias formas y diseños! Has de tu imagen interesante usando varias formas y colores.\nClick aquí para abrir una ventana en blanco repl.it e iniciar tu propia creación.\n"},{"uri":"https://thedanfernandez.github.io/workshops/microbit/","title":"Coding with Microbit","tags":[],"description":"Using MicroBits to teach students about JavaScript and hardware","content":"An introduction to JavaScript and hardware using MicroBits The Basics What is JavaScript? JavaScript is one of many programming languages and it is known as the programming language for the web. It used to control website behavior, such as button clicks, pop-up windows, data flows, and many other functions.\nVariables Variables are containers in your code that can hold a single number, word, or other information. This information can be used and changed by calling the variable later on throughout your program. This means that you are asking your program to access the information that you\u0026rsquo;ve stored.\nWith a few exceptions, variables can be named anything containing letters, digits, underscores, and dollar signs. BUT No matter what, they cannot have spaces and they should always start with a letter.\nVariables can hold different types of data, let\u0026rsquo;s go over the basic ones.\nThe Data Types Integers Integer is basically just a fancy name for any real number that is not a decimal. For example, integers are whole numbers like 3, 100, 6,000, -3, and so on!\n// this is a comment, these are used to describe what your code does // Below are different examples of variables  //Integer (non decimal number) variables examples:  var a = 5; var b = 10; var c = 15; Doubles Doubles are your other \u0026ldquo;messy\u0026rdquo; numbers, the ones with that funky decimal. Examples are numbers like 0.5, 1.5, and so on.\n//Double (decimal number) variable examples:  var x = 0.5; var y = 1.5; var z = 2.0; Strings Strings are just what programmers decided to call words. If it helps remind you that strings are words, think of them as a \u0026ldquo;string\u0026rdquo; of characters. Strings can be anything like your name or the name of favorite pet.\nStrings are surrounded by \u0026ldquo;quotation marks\u0026rdquo;\n//String (one or more words aka a \u0026#34;string\u0026#34; of characters) variable examples: //string variable values are surrounded by \u0026#34;quotation marks\u0026#34;  var company = \u0026#34;MICROSOFT\u0026#34;; var course = \u0026#34;Coding with Micro:Bits!\u0026#34;; var message = \u0026#34;Coding is so fun!\u0026#34;; Characters Characters are single letters. They are surrounded by \u0026lsquo;single quotes\u0026rsquo;\n//Character (a single letter) variable example: //character variable values are surrounded by \u0026#39;single quotes\u0026#39;  var letter = \u0026#34;A\u0026#34;; Booleans Sometimes programmers want to check if certain conditions are true or false. This information is stored in a Boolean data type.\nIf you\u0026rsquo;re curious about why these are called Booleans, a guy named George Boole is the one that created them.\n//Boolean (true or false) variable example  var canPigsFly = false; var codingIsCool = true; Math Operations Ah yes our favorite, computers are essentially calculators so it should be a given that we can do math on them. Here are examples of the math you can have in your JavaScript programs.\nAddition var a = a + b; //a = 15 var a += b; //a = 25 Subtraction var a = a - b; //a = 15 var a -= b; //a = 5 Multiplication var a = a * b; //a = 50 var a *= b; //a = 500 Division var a = a / b; //a = 50 var a /= b; //a = 5 Modulo Ah yes, the one that sounds scary but actually isn\u0026rsquo;t. Modulus operations just gives you the remainder after division. For example, 10 % 2 = 0 because when you divide 10 by 2, you have no remainder left.\nvar d = 10 % 2; //d= 0 var e = 5 % 2; //e= 1 Print Statements Sometimes you want your computer to actually display some text or the data your variables hold. To do this we use print statements.\nconsole.log(\u0026#34;This will show up in the console, but not the webpage\u0026#34;); alert(\u0026#34;This will display as a pop up window\u0026#34;); var userResponse = prompt(\u0026#34;Do you want to play a game?\u0026#34;); Conditionals and Logical Operators Conditionals, most commonly called if-statements, are used to choose what code you want to run depending on the value of your variables or other conditions.\n//conditionals if (true) { //this section of code will run } if (false) { //this section of code will not run } var age = 10; if (age \u0026lt; 18) { // if age is less than 10  print(\u0026#34;You\u0026#39;re not an adult yet! :( \u0026#34;); } Loops And last but not least, we have things called loops. These allow you to repeat parts of your code until a certain condition is met.\nThe alert() function you see in the code snippet below simply displays a pop-up displaying the parameter you pass to it, the parameter is what is inside the parantheses, in this case it is displaying the updated count value.\n//while loop - counts down from 10 var count = 10; while (count \u0026gt; 0) { alert(count); count--; } //for loop - counts down from 10 for (var i = 10; i \u0026gt; 0; i--) { alert(i); } //endless while loop while (true) { //this will happen over and over again forever since the condition will never be false. true is always true. } //break;\t//stops a loop immediately and moves to line below the loop Getting started with Micro:Bits Now that you know the basics of JavaScript, you can use your knew skills to start programming your Micro:Bits!\nWhat is a Micro:Bit? A Micro:Bit is a programmable mini computer! It can be coded from any web browser in various languages like javaScript, Python,Scratch, and Blocks. For our session today with we will be using JavaScript.\nYour Micro:Bit has the following physical features:\n 25 individually-programmable LEDs 2 programmable buttons Physical connection pins Motion sensors (accelerometer and compass) Wireless communication via bluetooth and radio USB interface  If you want to learn more about each individual component and all the features that come with your Micro:Bit, you can click here.\nGo ahead and take out the the Micro:Bit and the rest of the components from the bag. You should have one Micro:Bit, 2 batteries, a micro USB cable, and the battery holder (the black box with the red and black wires coming out of it). If you\u0026rsquo;re missing anything or need help feel free to ask one of the instructors!\nQuick Start Go ahead and plug in your Micro:Bit to your computer using the USB cable. You won\u0026rsquo;t be needed the batteries right for a while so you can go ahead and put those aside.\nOnce you plug in the Micro:Bit to your computer, it will show up on your computer as a drive called \u0026lsquo;MICROBIT\u0026rsquo;. If you open file explorer you should see something similar to the picture below.\nI\u0026rsquo;ve coded up a game to give you an example of what you can make! Go ahead and download my game by clicking the link below.\nClick to Download\nOnce it downloads you should see the HEX file inside your \u0026lsquo;Downloads\u0026rsquo; folder. (You\u0026rsquo;ll also notice I named this game \u0026lsquo;Asteroids\u0026rsquo;, if you have a better name please let me know)\nTo actually play the game, you\u0026rsquo;ll need to copy this file to your Micro:Bit. To do this you can simply copy and paste the file to the Micro:Bit directory, but I find another method much easier. Simply right click the file, click Send To then select MICROBIT\nIf you did this correctly, you will notice your Micro:Bit LEDs will pause for a bit and the yellow LED on the back will blink while the Micro:Bit downloads the code. If you don\u0026rsquo;t see this, don\u0026rsquo;t worry and ask us for help.\nCurious about what my game\u0026rsquo;s code looks like? Click here\nProtecting Your Spaceship Ready to play? These are the list of controls:\n A + B: Shoot lasers to destroy incoming asteroids Tilt: Tilt your microbit left or right to move your spaceship  Simple right? We\u0026rsquo;ll see. I\u0026rsquo;ve programmed this game to go faster the more asteroids you destroy. Think you have the high score? Show off and let us know! You can see your score by waiting for the game over screen to pass.\nTIP: If you reach the game over screen and want to start a new game, simply click the reset button behind your Micro:Bit.\nGet Coding Finally! Time for the best part! Now you can use everything you\u0026rsquo;ve learned to create your own programs and code your Micro:Bits!\nFirst, let\u0026rsquo;s display our name on the Micro:Bit. Follow along with me.\nNow let\u0026rsquo;s go through two tutorials together! Go to this link and find the \u0026ldquo;Flashing Heart\u0026rdquo; tutorial.\nWe\u0026rsquo;ll be going through this and the \u0026ldquo;Micro Chat\u0026rdquo; tutorials.\nYour Turn Go ahead and find another tutorial you\u0026rsquo;re interested in, or if you\u0026rsquo;re feeling confident, code your own program from scratch! Have fun!\nResources and Advanced Micro:Bit Cheat Sheet Variables, Printing, and Downloading   JavaScript variables are the same except the word \u0026lsquo;let\u0026rsquo; is used instead of var\nlet variable = \u0026#34;text\u0026#34;;   The command basic.showString(variable); will make the text appear in the LED of the Micro:Bit\nlet name = \u0026#34;Gonzo\u0026#34;; basic.showString(name);   Useful JavaScript Commands The commands below are in javaScript, if you prefer to use the Block code equivalent just look in the corresponding library. For example, you can find basic.forever() by clicking the Basic tab and dragging the forever function to your screen.\nbasic.forever(function() { // Code between these brackets will run forever on your Micro:Bit }); // Displays the number inside the parantheses on your Micro:Bit basic.showNumber(number); // Displays the string (word) inside the parantheses on your Micro:Bit basic.showString(string); // Generates a random number between 0 and the number inside the parantheses Math.random(number); input.onButtonPressed(Button.A, function() { // Code here runs when button you specify is pressed, in this case when Button A is pressed }); // Displays the specified character on the LED screen basic.showIcon(IconNames.Character); // Pauses your Miceo:Bit for the specified amount of microseconds basic.pause(microseconds); // "},{"uri":"https://thedanfernandez.github.io/workshops/android-tictactoe/","title":"Android Tictactoe","tags":[],"description":"Learn about variables, functions, and conditionals all while building a Tic-Tac-Toe Android app.","content":""},{"uri":"https://thedanfernandez.github.io/workshops/csharp-guess-the-word/","title":"C# Guess The Word Game","tags":[],"description":"An introductory guide on how to make a simple Guess The Word from scratch using C#","content":"Welcome The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game!\nTable of Contents  Starting Up \n Writing to Console \n Comments \n Activity 1 \n Strings \n Activity 2 \n Numbers \n Booleans \n Boolean Operators \n Variables \n Activity 3 \n Reading from Console \n Activity 4 \n If-else statements \n Activity 5 \n While loops \n Activity 6 \n "},{"uri":"https://thedanfernandez.github.io/workshops/example/","title":"Example","tags":[],"description":"Workshop description goes here","content":""},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/web-developer/","title":"Web Developer Guidelines","tags":[],"description":"","content":"This document is for website developers only for changing the Nuevo Foundation workshop project templates and style.\nBefore getting started Before adding/updating the website, ensure you have sync\u0026rsquo;d with the project team and the existing work in the Project Backlog.\nSetup Follow the instructions in the Project readme.md to install Git and Hugo to test the project locally.\nWeb design styles and structure  Images: Website images should be themes/images CSS Ignore the SCSS files and just use CSS files in /themes/docdock/static/css/ Make sure to add a reference to the CSS you want to include in the head.html file at /themes/docdock/layouts/partials/flex/head.html  Dissecting a Workshop Page  Full page template: To see all of the components of a page including header, menu, body, footer, see /themes/docdock/layouts/_default/baseof.html Head: Meta, CSS, and JS files /themes/docdock/layouts/partials/flex/head.html Top / Menu Navigation: Don\u0026rsquo;t use docDock config.toml values, instead add/edit HTML in: /themes/docdock/layouts/partials/flex/body-before-content.html Left Menu: /themes/docdock/layouts/partials/flex/menu.html Footer Navigation: /themes/docdock/layouts/partials/flex/body-after-content.html Metadata Box: /themes/docdock/layouts/partials/flex/body-after-content.html  Help, the CSS is gone One challenge with Hugo is that a key parameter in the build is the baseURL variable. If the content is loading, and the CSS is not, it\u0026rsquo;s likely an issue with the baseURL setting.\nYou can change the baseURL when building content instead of changing the config.toml file. The example below will minify the CSS and JS, set the baseURL to the production .org URL and copy the results to the public directory.\nhugo --minify --baseURL \u0026quot;https://workshops.nuevofoundation.org/\u0026quot;\nTips and Tricks  Ignore Public: By default, running hugo with no parameters will build the site to the public directory. Make sure you do not add the public directory to source control (it\u0026rsquo;s in gitignore now). Left Nav: You can hide content from the left nav by settting metadata on the file hidden: true (like this page\u0026rsquo;s markdown!) Partials: For resuable components to a page, create a new partial under /themes/docdock/layouts/partials/flex/.  "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/","title":"Workshop Contributor Guidelines","tags":[],"description":"","content":"Welcome! These guidelines are for creating or editing a Nuevo Foundation Workshop.\nComing Soon Workshop guidance is a work in progress. In the meantime, visit the project readme.md for setup instructions.\nFormatting Reference  Standard Markdown cheatsheet Custom Formatting Options using shortcodes  Formatting Examples This theme includes a number of options to customize the look and feel of your site.\nAlerts Info {{% alert theme=\u0026quot;info\u0026quot; %}}**this** is an info {{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;this is an info\nSuccess {{% alert theme=\u0026quot;success\u0026quot; %}}**Yeahhh !** is a success{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Yeahhh ! is a success\nWarning {{% alert theme=\u0026quot;warning\u0026quot; %}}**Be carefull** is a warning{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Be carefull is a warning\nDanger {{% alert theme=\u0026quot;danger\u0026quot; %}}**Beware !** is a danger{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Beware ! is a danger\nButtons {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; \u0026gt;}} go to Nuevo Foundation {{\u0026lt; /button \u0026gt;}}  go to Nuevo Foundation  Success Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;success\u0026quot; \u0026gt;}} Success {{\u0026lt; /button \u0026gt;}}  Success  Info Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;info\u0026quot; \u0026gt;}} Info {{\u0026lt; /button \u0026gt;}}  Info  Warning Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;warning\u0026quot; \u0026gt;}} Warning {{\u0026lt; /button \u0026gt;}}  Warning  Danger Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;danger\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Default Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;default\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Expand {{%expand%}}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.{{% /expand%}}     Expand me... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n Notices Note Notice {{% notice note %}} A notice disclaimer {{% /notice %}}  renders as\nA notice disclaimer\n Info Notice {{% notice info %}} An information disclaimer {{% /notice %}}  renders as\nAn information disclaimer\n Tip Notice {{% notice tip %}} A tip disclaimer {{% /notice %}}  A tip disclaimer\n Warning Notice {{% notice warning %}} An warning disclaimer {{% /notice %}}  renders as\nAn warning disclaimer\n Example icons available Full list here\n   asterisk   plus   euro   eur   minus   cloud   envelope   pencil   glass   music   search   heart   star   star-empty   user   film   th-large   th   th-list   ok   remove   zoom-in   zoom-out   off   signal   cog   trash   home   file   time   road   download-alt   download   upload   inbox   play-circle   repeat   refresh   list-alt   lock   flag   headphones   volume-off   volume-down   volume-up   qrcode   barcode   tag   tags   book   bookmark   print   camera   font   bold   italic  "},{"uri":"https://thedanfernandez.github.io/workshops/","title":"Nuevo Foundation Workshops","tags":[],"description":"","content":"Workshop Projects   C# Guess The Word Game An introductory guide on how to make a simple Guess The Word from scratch using C#\n   Coding with Microbit Using MicroBits to teach students about JavaScript and hardware\n   Python Choose Your Own Adventure Game An introductory guide on how to make a Choose Your Own Adventure Game in Python\n   Python Turtle Learning Python with Turtle\n   Python: Basics Basics of python\n   Python: Create music with EarSketch Create music using EarSketch\n   Web Basics An introductory guide on how to make a simple website from scratch.\n  Contributor guidelines  Contributor guidelines Workshop website developer guidelines  "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/alert/","title":"alert","tags":[],"description":"The alert shortcode allows you to highlight information in your page.","content":"The alert shortcode allow you to highlight information in your page. They create a colored box surrounding your text, like this:\nrole=\u0026quot;alert\u0026quot;\u0026gt;This is an alert !\nUsage    Parameter Default Description     theme info success, info,warning,danger    role=\u0026quot;alert\u0026quot;\u0026gt; Tips : setting only the theme as argument works too : {{%alert warning%}} instead of {{%alert theme=\u0026quot;warning\u0026quot;%}}\n Basic examples {{% alert theme=\u0026quot;info\u0026quot; %}}**this** is a text{{% /alert %}} {{% alert theme=\u0026quot;success\u0026quot; %}}**Yeahhh !** is a text{{% /alert %}} {{% alert theme=\u0026quot;warning\u0026quot; %}}**Be carefull** is a text{{% /alert %}} {{% alert theme=\u0026quot;danger\u0026quot; %}}**Beware !** is a text{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;this is an info\nrole=\u0026quot;alert\u0026quot;\u0026gt;Yeahhh ! is an success\nrole=\u0026quot;alert\u0026quot;\u0026gt;Be carefull is a warning\nrole=\u0026quot;alert\u0026quot;\u0026gt;Beware ! is a danger\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/attachments/","title":"attachments","tags":[],"description":"The Attachments shortcode displays a list of files attached to a page.","content":"The Attachments shortcode displays a list of files attached to a page. Example :\nrole=\u0026quot;alert\u0026quot;\u0026gt;  Attachments \n \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/BachGavotteShort.mp3\u0026quot; \u0026gt; BachGavotteShort.mp3 \u0026lt;/a\u0026gt; (357 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/Carroll_AliceAuPaysDesMerveilles.pdf\u0026quot; \u0026gt; Carroll_AliceAuPaysDesMerveilles.pdf \u0026lt;/a\u0026gt; (175 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/adivorciarsetoca00cape.pdf\u0026quot; \u0026gt; adivorciarsetoca00cape.pdf \u0026lt;/a\u0026gt; (361 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/hugo.png\u0026quot; \u0026gt; hugo.png \u0026lt;/a\u0026gt; (17 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/movieselectricsheep-flock-244-32500-2.mp4\u0026quot; \u0026gt; movieselectricsheep-flock-244-32500-2.mp4 \u0026lt;/a\u0026gt; (340 kB) \u0026lt;/li\u0026gt;    Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages\n  If your page is a markdown file, attachements must be place in a folder named like your page and ending with .files.\n  content  _index.md page.files  attachment.pdf   page.md       If your page is a folder, attachements must be place in a nested \u0026lsquo;files\u0026rsquo; folder.\n  content  _index.md page  index.md files  attachment.pdf           That\u0026rsquo;s all !\nrole=\u0026quot;alert\u0026quot;\u0026gt;Tip : Look at this documentation source code on github\nparameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List\u0026rsquo;s title   pattern \u0026ldquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. \u0026lt;div class=\u0026quot;alert   alert-warning\u0026rdquo;      role=\u0026quot;alert\u0026quot;\u0026gt;The pattern parameter value must be regular expressions.\nFor example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use *.jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)   | Demo List of attachments ending in pdf or mp4 {{%attachments title=\u0026quot;Related files\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}  renders as\n  Related files   \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/Carroll_AliceAuPaysDesMerveilles.pdf\u0026quot; \u0026gt; Carroll_AliceAuPaysDesMerveilles.pdf \u0026lt;/a\u0026gt; (175 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/adivorciarsetoca00cape.pdf\u0026quot; \u0026gt; adivorciarsetoca00cape.pdf \u0026lt;/a\u0026gt; (361 kB) \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/movieselectricsheep-flock-244-32500-2.mp4\u0026quot; \u0026gt; movieselectricsheep-flock-244-32500-2.mp4 \u0026lt;/a\u0026gt; (340 kB) \u0026lt;/li\u0026gt;   "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/button/","title":"button","tags":[],"description":"Display an actionable button in your page.","content":"Display an actionable button in your page.\n This is a warning button   Usage    Parameter Default Description     href \u0026quot;\u0026rdquo; The location href to link to   align \u0026ldquo;center\u0026rdquo; horizontal align button on page   theme primary default, primary , success,info,warning,danger    The inner text you place in short code will be displayed as the button text\nDemo {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; \u0026gt;}} go to google {{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; theme=\u0026quot;success\u0026quot; \u0026gt;}} Success {{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; theme=\u0026quot;info\u0026quot; \u0026gt;}} Info {{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; theme=\u0026quot;warning\u0026quot; \u0026gt;}} Warning {{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; theme=\u0026quot;danger\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://google.com\u0026quot; theme=\u0026quot;default\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}   go to google  Success  Info  Warning  Danger !  Danger !  "},{"uri":"https://thedanfernandez.github.io/workshops/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/","title":"children","tags":[],"description":"List the child pages of a page","content":"Use the children shortcode to list the child pages of a page and the further descendants (children\u0026rsquo;s children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   style \u0026ldquo;li\u0026rdquo; Choose the style used to display descendants. It could be any HTML tag name, use \u0026ldquo;card\u0026rdquo; to display children pages as cards   showhidden \u0026ldquo;false\u0026rdquo; When true, child pages hidden from the menu will be displayed   description \u0026ldquo;false\u0026rdquo; Allows you to include a short text under each page in the list.when no description exists for the page, children shortcode takes the first 70 words of your content. read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages. \u0026lt;div class=\u0026quot;alert   alert-success\u0026rdquo;      role=\u0026quot;alert\u0026quot;\u0026gt;Tips: set 999 to get all descendants | | sort | none | Sort Children By\nWeight - to sort on menu orderName - to sort alphabetically on menu labelIdentifier - to sort alphabetically on identifier set in frontmatterURL - URL |\nDemo {{% children %}}   page 1 \n page 2 \n page 3 \n page test \n {{% children description=\u0026quot;true\u0026quot; %}}   page 1 This is a demo child page\n\n page 2 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n page 3 This is a demo child page\n\n page test This is a page test\n\n {{% children depth=\u0026quot;3\u0026quot; showhidden=\u0026quot;true\u0026quot; %}}   page 1 \n  page 1-1 \n  page 1-1-1 \n   page 2 \n  page test 3 \n    page 3 \n   page 4 \n   page test \n   {{% children style=\u0026quot;h2\u0026quot; depth=\u0026quot;3\u0026quot; description=\u0026quot;true\u0026quot; %}}  \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-1/\u0026quot;\u0026gt;page 1\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a demo child page\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-1/children-1-1/\u0026quot;\u0026gt;page 1-1\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-1/children-1-1/children-1-1-1/\u0026quot;\u0026gt;page 1-1-1\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;This is a demo child page\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-2/\u0026quot;\u0026gt;page 2\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-2/test3/\u0026quot;\u0026gt;page test 3\u0026lt;/a\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;This is a page test\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/children-3/\u0026quot;\u0026gt;page 3\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a demo child page\u0026lt;/p\u0026gt;   \n\u0026lt;a href=\u0026quot;/workshops/guidelines/shortcodes/children/test/\u0026quot;\u0026gt;page test\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This is a page test\u0026lt;/p\u0026gt;    {{% children style=\u0026quot;div\u0026quot; depth=\u0026quot;999\u0026quot; %}}   page 1 \n page 1-1 \n page 1-1-1 \n page 1-1-1-1 \n page 1-1-1-1-1 \n page 2 \n page test 3 \n page 3 \n page test \n {{% children style=\u0026quot;card\u0026quot; depth=\u0026quot;2\u0026quot; description=\u0026quot;true\u0026quot; %}}   page 1 This is a demo child page\n\n page 1-1 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n\n page 2 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n page test 3 This is a page test\n\n page 3 This is a demo child page\n\n page test This is a page test\n\n "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/expand/","title":"expand","tags":[],"description":"Displays an expandable/collapsible section of text on your page","content":"The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example\n   Expand me... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is \u0026ldquo;Expand me\u0026hellip;\u0026quot;)\n{{%expand \u0026quot;Is this docdock theme rocks ?\u0026quot; %}}Yes !.{{% /expand%}}     Is this docdock theme rocks ? \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Yes ! \n Demo {{%expand%}}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.{{% /expand%}}     Expand me... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/icon/","title":"icon","tags":[],"description":"Display an icon.","content":"Display an icon like `\n\n`\nIt uses :\n glyphicons library (bootstrap).more info here fontawesome library more info here  This icon shortcode will display an icon in your page.\nUsage    Parameter Default Description     name required name of icon (see bellow)   size none size of icon, medium, xx-small, x-small, small, large, x-large, xx-large, 11px, 2em, 20%\u0026hellip;.    role=\u0026quot;alert\u0026quot;\u0026gt; Tips : setting only the name as argument works too : {{\u0026lt;icon film\u0026gt;}} instead of {{\u0026lt;icon name=\u0026quot;film\u0026quot;\u0026gt;}}\n Demo {{\u0026lt; icon name=\u0026quot;film\u0026quot; size=\u0026quot;large\u0026quot; \u0026gt;}}   .\nicons available    asterisk   plus   euro   eur   minus   cloud   envelope   pencil   glass   music   search   heart   star   star-empty   user   film   th-large   th   th-list   ok   remove   zoom-in   zoom-out   off   signal   cog   trash   home   file   time   road   download-alt   download   upload   inbox   play-circle   repeat   refresh   list-alt   lock   flag   headphones   volume-off   volume-down   volume-up   qrcode   barcode   tag   tags   book   bookmark   print   camera   font   bold   italic   text-height   text-width   align-left   align-center   align-right   align-justify   list   indent-left   indent-right   facetime-video   picture   map-marker   adjust   tint   edit   share   check   move   step-backward   fast-backward   backward   play   pause   stop   forward   fast-forward   step-forward   eject   chevron-left   chevron-right   plus-sign   minus-sign   remove-sign   ok-sign   question-sign   info-sign   screenshot   remove-circle   ok-circle   ban-circle   arrow-left   arrow-right   arrow-up   arrow-down   share-alt   resize-full   resize-small   exclamation-sign   gift   leaf   fire   eye-open   eye-close   warning-sign   plane   calendar   random   comment   magnet   chevron-up   chevron-down   retweet   shopping-cart   folder-close   folder-open   resize-vertical   resize-horizontal   hdd   bullhorn   bell   certificate   thumbs-up   thumbs-down   hand-right   hand-left   hand-up   hand-down   circle-arrow-right   circle-arrow-left   circle-arrow-up   circle-arrow-down   globe   wrench   tasks   filter   briefcase   fullscreen   dashboard   paperclip   heart-empty   link   phone   pushpin   usd   gbp   sort   sort-by-alphabet   sort-by-alphabet-alt   sort-by-order   sort-by-order-alt   sort-by-attributes   sort-by-attributes-alt   unchecked   expand   collapse-down   collapse-up   log-in   flash   log-out   new-window   record   save   open   saved   import   export   send   floppy-disk   floppy-saved   floppy-remove   floppy-save   floppy-open   credit-card   transfer   cutlery   header   compressed   earphone   phone-alt   tower   stats   sd-video   hd-video   subtitles   sound-stereo   sound-dolby   sound-5-1   sound-6-1   sound-7-1   copyright-mark   registration-mark   cloud-download   cloud-upload   tree-conifer   tree-deciduous   cd   save-file   open-file   level-up   copy   paste   alert   equalizer   king   queen   pawn   bishop   knight   baby-formula   tent   blackboard   bed   apple   erase   hourglass   lamp   duplicate   piggy-bank   scissors   bitcoin   btc   xbt   yen   jpy   ruble   rub   scale   ice-lolly   ice-lolly-tasted   education   option-horizontal   option-vertical   menu-hamburger   modal-window   oil   grain   sunglasses   text-size   text-color   text-background   object-align-top   object-align-bottom   object-align-horizontal   object-align-left   object-align-vertical   object-align-right   triangle-right   triangle-left   triangle-bottom   triangle-top   console   superscript   subscript   menu-left   menu-right   menu-down   menu-up  Web Application Icons    fa-address-book   fa-address-book-o   fa-address-card   fa-address-card-o   fa-adjust   fa-american-sign-language-interpreting   fa-anchor   fa-archive   fa-area-chart   fa-arrows   fa-arrows-h   fa-arrows-v   fa-asl-interpreting (alias)   fa-assistive-listening-systems   fa-asterisk   fa-at   fa-audio-description   fa-automobile (alias)   fa-balance-scale   fa-ban   fa-bank (alias)   fa-bar-chart   fa-bar-chart-o (alias)   fa-barcode   fa-bars   fa-bath   fa-bathtub (alias)   fa-battery (alias)   fa-battery-0 (alias)   fa-battery-1 (alias)   fa-battery-2 (alias)   fa-battery-3 (alias)   fa-battery-4 (alias)   fa-battery-empty   fa-battery-full   fa-battery-half   fa-battery-quarter   fa-battery-three-quarters   fa-bed   fa-beer   fa-bell   fa-bell-o   fa-bell-slash   fa-bell-slash-o   fa-bicycle   fa-binoculars   fa-birthday-cake   fa-blind   fa-bluetooth   fa-bluetooth-b   fa-bolt   fa-bomb   fa-book   fa-bookmark   fa-bookmark-o   fa-braille   fa-briefcase   fa-bug   fa-building   fa-building-o   fa-bullhorn   fa-bullseye   fa-bus   fa-cab (alias)   fa-calculator   fa-calendar   fa-calendar-check-o   fa-calendar-minus-o   fa-calendar-o   fa-calendar-plus-o   fa-calendar-times-o   fa-camera   fa-camera-retro   fa-car   fa-caret-square-o-down   fa-caret-square-o-left   fa-caret-square-o-right   fa-caret-square-o-up   fa-cart-arrow-down   fa-cart-plus   fa-cc   fa-certificate   fa-check   fa-check-circle   fa-check-circle-o   fa-check-square   fa-check-square-o   fa-child   fa-circle   fa-circle-o   fa-circle-o-notch   fa-circle-thin   fa-clock-o   fa-clone   fa-close (alias)   fa-cloud   fa-cloud-download   fa-cloud-upload   fa-code   fa-code-fork   fa-coffee   fa-cog   fa-cogs   fa-comment   fa-comment-o   fa-commenting   fa-commenting-o   fa-comments   fa-comments-o   fa-compass   fa-copyright   fa-creative-commons   fa-credit-card   fa-credit-card-alt   fa-crop   fa-crosshairs   fa-cube   fa-cubes   fa-cutlery   fa-dashboard (alias)   fa-database   fa-deaf   fa-deafness (alias)   fa-desktop   fa-diamond   fa-dot-circle-o   fa-download   fa-drivers-license (alias)   fa-drivers-license-o (alias)   fa-edit (alias)   fa-ellipsis-h   fa-ellipsis-v   fa-envelope   fa-envelope-o   fa-envelope-open   fa-envelope-open-o   fa-envelope-square   fa-eraser   fa-exchange   fa-exclamation   fa-exclamation-circle   fa-exclamation-triangle   fa-external-link   fa-external-link-square   fa-eye   fa-eye-slash   fa-eyedropper   fa-fax   fa-feed (alias)   fa-female   fa-fighter-jet   fa-file-archive-o   fa-file-audio-o   fa-file-code-o   fa-file-excel-o   fa-file-image-o   fa-file-movie-o (alias)   fa-file-pdf-o   fa-file-photo-o (alias)   fa-file-picture-o (alias)   fa-file-powerpoint-o   fa-file-sound-o (alias)   fa-file-video-o   fa-file-word-o   fa-file-zip-o (alias)   fa-film   fa-filter   fa-fire   fa-fire-extinguisher   fa-flag   fa-flag-checkered   fa-flag-o   fa-flash (alias)   fa-flask   fa-folder   fa-folder-o   fa-folder-open   fa-folder-open-o   fa-frown-o   fa-futbol-o   fa-gamepad   fa-gavel   fa-gear (alias)   fa-gears (alias)   fa-gift   fa-glass   fa-globe   fa-graduation-cap   fa-group (alias)   fa-hand-grab-o (alias)   fa-hand-lizard-o   fa-hand-paper-o   fa-hand-peace-o   fa-hand-pointer-o   fa-hand-rock-o   fa-hand-scissors-o   fa-hand-spock-o   fa-hand-stop-o (alias)   fa-handshake-o   fa-hard-of-hearing (alias)   fa-hashtag   fa-hdd-o   fa-headphones   fa-heart   fa-heart-o   fa-heartbeat   fa-history   fa-home   fa-hotel (alias)   fa-hourglass   fa-hourglass-1 (alias)   fa-hourglass-2 (alias)   fa-hourglass-3 (alias)   fa-hourglass-end   fa-hourglass-half   fa-hourglass-o   fa-hourglass-start   fa-i-cursor   fa-id-badge   fa-id-card   fa-id-card-o   fa-image (alias)   fa-inbox   fa-industry   fa-info   fa-info-circle   fa-institution (alias)   fa-key   fa-keyboard-o   fa-language   fa-laptop   fa-leaf   fa-legal (alias)   fa-lemon-o   fa-level-down   fa-level-up   fa-life-bouy (alias)   fa-life-buoy (alias)   fa-life-ring   fa-life-saver (alias)   fa-lightbulb-o   fa-line-chart   fa-location-arrow   fa-lock   fa-low-vision   fa-magic   fa-magnet   fa-mail-forward (alias)   fa-mail-reply (alias)   fa-mail-reply-all (alias)   fa-male   fa-map   fa-map-marker   fa-map-o   fa-map-pin   fa-map-signs   fa-meh-o   fa-microchip   fa-microphone   fa-microphone-slash   fa-minus   fa-minus-circle   fa-minus-square   fa-minus-square-o   fa-mobile   fa-mobile-phone (alias)   fa-money   fa-moon-o   fa-mortar-board (alias)   fa-motorcycle   fa-mouse-pointer   fa-music   fa-navicon (alias)   fa-newspaper-o   fa-object-group   fa-object-ungroup   fa-paint-brush   fa-paper-plane   fa-paper-plane-o   fa-paw   fa-pencil   fa-pencil-square   fa-pencil-square-o   fa-percent   fa-phone   fa-phone-square   fa-photo (alias)   fa-picture-o   fa-pie-chart   fa-plane   fa-plug   fa-plus   fa-plus-circle   fa-plus-square   fa-plus-square-o   fa-podcast   fa-power-off   fa-print   fa-puzzle-piece   fa-qrcode   fa-question   fa-question-circle   fa-question-circle-o   fa-quote-left   fa-quote-right   fa-random   fa-recycle   fa-refresh   fa-registered   fa-remove (alias)   fa-reorder (alias)   fa-reply   fa-reply-all   fa-retweet   fa-road   fa-rocket   fa-rss   fa-rss-square   fa-s15 (alias)   fa-search   fa-search-minus   fa-search-plus   fa-send (alias)   fa-send-o (alias)   fa-server   fa-share   fa-share-alt   fa-share-alt-square   fa-share-square   fa-share-square-o   fa-shield   fa-ship   fa-shopping-bag   fa-shopping-basket   fa-shopping-cart   fa-shower   fa-sign-in   fa-sign-language   fa-sign-out   fa-signal   fa-signing (alias)   fa-sitemap   fa-sliders   fa-smile-o   fa-snowflake-o   fa-soccer-ball-o (alias)   fa-sort   fa-sort-alpha-asc   fa-sort-alpha-desc   fa-sort-amount-asc   fa-sort-amount-desc   fa-sort-asc   fa-sort-desc   fa-sort-down (alias)   fa-sort-numeric-asc   fa-sort-numeric-desc   fa-sort-up (alias)   fa-space-shuttle   fa-spinner   fa-spoon   fa-square   fa-square-o   fa-star   fa-star-half   fa-star-half-empty (alias)   fa-star-half-full (alias)   fa-star-half-o   fa-star-o   fa-sticky-note   fa-sticky-note-o   fa-street-view   fa-suitcase   fa-sun-o   fa-support (alias)   fa-tablet   fa-tachometer   fa-tag   fa-tags   fa-tasks   fa-taxi   fa-television   fa-terminal   fa-thermometer (alias)   fa-thermometer-0 (alias)   fa-thermometer-1 (alias)   fa-thermometer-2 (alias)   fa-thermometer-3 (alias)   fa-thermometer-4 (alias)   fa-thermometer-empty   fa-thermometer-full   fa-thermometer-half   fa-thermometer-quarter   fa-thermometer-three-quarters   fa-thumb-tack   fa-thumbs-down   fa-thumbs-o-down   fa-thumbs-o-up   fa-thumbs-up   fa-ticket   fa-times   fa-times-circle   fa-times-circle-o   fa-times-rectangle (alias)   fa-times-rectangle-o (alias)   fa-tint   fa-toggle-down (alias)   fa-toggle-left (alias)   fa-toggle-off   fa-toggle-on   fa-toggle-right (alias)   fa-toggle-up (alias)   fa-trademark   fa-trash   fa-trash-o   fa-tree   fa-trophy   fa-truck   fa-tty   fa-tv (alias)   fa-umbrella   fa-universal-access   fa-university   fa-unlock   fa-unlock-alt   fa-unsorted (alias)   fa-upload   fa-user   fa-user-circle   fa-user-circle-o   fa-user-o   fa-user-plus   fa-user-secret   fa-user-times   fa-users   fa-vcard (alias)   fa-vcard-o (alias)   fa-video-camera   fa-volume-control-phone   fa-volume-down   fa-volume-off   fa-volume-up   fa-warning (alias)   fa-wheelchair   fa-wheelchair-alt   fa-wifi   fa-window-close   fa-window-close-o   fa-window-maximize   fa-window-minimize   fa-window-restore   fa-wrench  Accessibility Icons    fa-american-sign-language-interpreting   fa-asl-interpreting (alias)   fa-assistive-listening-systems   fa-audio-description   fa-blind   fa-braille   fa-cc   fa-deaf   fa-deafness (alias)   fa-hard-of-hearing (alias)   fa-low-vision   fa-question-circle-o   fa-sign-language   fa-signing (alias)   fa-tty   fa-universal-access   fa-volume-control-phone   fa-wheelchair   fa-wheelchair-alt  Hand Icons    fa-hand-grab-o (alias)   fa-hand-lizard-o   fa-hand-o-down   fa-hand-o-left   fa-hand-o-right   fa-hand-o-up   fa-hand-paper-o   fa-hand-peace-o   fa-hand-pointer-o   fa-hand-rock-o   fa-hand-scissors-o   fa-hand-spock-o   fa-hand-stop-o (alias)   fa-thumbs-down   fa-thumbs-o-down   fa-thumbs-o-up   fa-thumbs-up  Transportation Icons    fa-ambulance   fa-automobile (alias)   fa-bicycle   fa-bus   fa-cab (alias)   fa-car   fa-fighter-jet   fa-motorcycle   fa-plane   fa-rocket   fa-ship   fa-space-shuttle   fa-subway   fa-taxi   fa-train   fa-truck   fa-wheelchair   fa-wheelchair-alt  Gender Icons    fa-genderless   fa-intersex (alias)   fa-mars   fa-mars-double   fa-mars-stroke   fa-mars-stroke-h   fa-mars-stroke-v   fa-mercury   fa-neuter   fa-transgender   fa-transgender-alt   fa-venus   fa-venus-double   fa-venus-mars  File Type Icons    fa-file   fa-file-archive-o   fa-file-audio-o   fa-file-code-o   fa-file-excel-o   fa-file-image-o   fa-file-movie-o (alias)   fa-file-o   fa-file-pdf-o   fa-file-photo-o (alias)   fa-file-picture-o (alias)   fa-file-powerpoint-o   fa-file-sound-o (alias)   fa-file-text   fa-file-text-o   fa-file-video-o   fa-file-word-o   fa-file-zip-o (alias)  Spinner Icons    fa-circle-o-notch   fa-cog   fa-gear (alias)   fa-refresh   fa-spinner  Form Control Icons    fa-check-square   fa-check-square-o   fa-circle   fa-circle-o   fa-dot-circle-o   fa-minus-square   fa-minus-square-o   fa-plus-square   fa-plus-square-o   fa-square   fa-square-o  Payment Icons    fa-cc-amex   fa-cc-diners-club   fa-cc-discover   fa-cc-jcb   fa-cc-mastercard   fa-cc-paypal   fa-cc-stripe   fa-cc-visa   fa-credit-card   fa-credit-card-alt   fa-google-wallet   fa-paypal  Chart Icons    fa-area-chart   fa-bar-chart   fa-bar-chart-o (alias)   fa-line-chart   fa-pie-chart  Currency Icons    fa-bitcoin (alias)   fa-btc   fa-cny (alias)   fa-dollar (alias)   fa-eur   fa-euro (alias)   fa-gbp   fa-gg   fa-gg-circle   fa-ils   fa-inr   fa-jpy   fa-krw   fa-money   fa-rmb (alias)   fa-rouble (alias)   fa-rub   fa-ruble (alias)   fa-rupee (alias)   fa-shekel (alias)   fa-sheqel (alias)   fa-try   fa-turkish-lira (alias)   fa-usd   fa-won (alias)   fa-yen (alias)  Text Editor Icons    fa-align-center   fa-align-justify   fa-align-left   fa-align-right   fa-bold   fa-chain (alias)   fa-chain-broken   fa-clipboard   fa-columns   fa-copy (alias)   fa-cut (alias)   fa-dedent (alias)   fa-eraser   fa-file   fa-file-o   fa-file-text   fa-file-text-o   fa-files-o   fa-floppy-o   fa-font   fa-header   fa-indent   fa-italic   fa-link   fa-list   fa-list-alt   fa-list-ol   fa-list-ul   fa-outdent   fa-paperclip   fa-paragraph   fa-paste (alias)   fa-repeat   fa-rotate-left (alias)   fa-rotate-right (alias)   fa-save (alias)   fa-scissors   fa-strikethrough   fa-subscript   fa-superscript   fa-table   fa-text-height   fa-text-width   fa-th   fa-th-large   fa-th-list   fa-underline   fa-undo   fa-unlink (alias)  Directional Icons    fa-angle-double-down   fa-angle-double-left   fa-angle-double-right   fa-angle-double-up   fa-angle-down   fa-angle-left   fa-angle-right   fa-angle-up   fa-arrow-circle-down   fa-arrow-circle-left   fa-arrow-circle-o-down   fa-arrow-circle-o-left   fa-arrow-circle-o-right   fa-arrow-circle-o-up   fa-arrow-circle-right   fa-arrow-circle-up   fa-arrow-down   fa-arrow-left   fa-arrow-right   fa-arrow-up   fa-arrows   fa-arrows-alt   fa-arrows-h   fa-arrows-v   fa-caret-down   fa-caret-left   fa-caret-right   fa-caret-square-o-down   fa-caret-square-o-left   fa-caret-square-o-right   fa-caret-square-o-up   fa-caret-up   fa-chevron-circle-down   fa-chevron-circle-left   fa-chevron-circle-right   fa-chevron-circle-up   fa-chevron-down   fa-chevron-left   fa-chevron-right   fa-chevron-up   fa-exchange   fa-hand-o-down   fa-hand-o-left   fa-hand-o-right   fa-hand-o-up   fa-long-arrow-down   fa-long-arrow-left   fa-long-arrow-right   fa-long-arrow-up   fa-toggle-down (alias)   fa-toggle-left (alias)   fa-toggle-right (alias)   fa-toggle-up (alias)  Video Player Icons    fa-arrows-alt   fa-backward   fa-compress   fa-eject   fa-expand   fa-fast-backward   fa-fast-forward   fa-forward   fa-pause   fa-pause-circle   fa-pause-circle-o   fa-play   fa-play-circle   fa-play-circle-o   fa-random   fa-step-backward   fa-step-forward   fa-stop   fa-stop-circle   fa-stop-circle-o   fa-youtube-play  Brand Icons    fa-500px   fa-adn   fa-amazon   fa-android   fa-angellist   fa-apple   fa-bandcamp   fa-behance   fa-behance-square   fa-bitbucket   fa-bitbucket-square   fa-bitcoin (alias)   fa-black-tie   fa-bluetooth   fa-bluetooth-b   fa-btc   fa-buysellads   fa-cc-amex   fa-cc-diners-club   fa-cc-discover   fa-cc-jcb   fa-cc-mastercard   fa-cc-paypal   fa-cc-stripe   fa-cc-visa   fa-chrome   fa-codepen   fa-codiepie   fa-connectdevelop   fa-contao   fa-css3   fa-dashcube   fa-delicious   fa-deviantart   fa-digg   fa-dribbble   fa-dropbox   fa-drupal   fa-edge   fa-eercast   fa-empire   fa-envira   fa-etsy   fa-expeditedssl   fa-fa (alias)   fa-facebook   fa-facebook-f (alias)   fa-facebook-official   fa-facebook-square   fa-firefox   fa-first-order   fa-flickr   fa-font-awesome   fa-fonticons   fa-fort-awesome   fa-forumbee   fa-foursquare   fa-free-code-camp   fa-ge (alias)   fa-get-pocket   fa-gg   fa-gg-circle   fa-git   fa-git-square   fa-github   fa-github-alt   fa-github-square   fa-gitlab   fa-gittip (alias)   fa-glide   fa-glide-g   fa-google   fa-google-plus   fa-google-plus-circle (alias)   fa-google-plus-official   fa-google-plus-square   fa-google-wallet   fa-gratipay   fa-grav   fa-hacker-news   fa-houzz   fa-html5   fa-imdb   fa-instagram   fa-internet-explorer   fa-ioxhost   fa-joomla   fa-jsfiddle   fa-lastfm   fa-lastfm-square   fa-leanpub   fa-linkedin   fa-linkedin-square   fa-linode   fa-linux   fa-maxcdn   fa-meanpath   fa-medium   fa-meetup   fa-mixcloud   fa-modx   fa-odnoklassniki   fa-odnoklassniki-square   fa-opencart   fa-openid   fa-opera   fa-optin-monster   fa-pagelines   fa-paypal   fa-pied-piper   fa-pied-piper-alt   fa-pied-piper-pp   fa-pinterest   fa-pinterest-p   fa-pinterest-square   fa-product-hunt   fa-qq   fa-quora   fa-ra (alias)   fa-ravelry   fa-rebel   fa-reddit   fa-reddit-alien   fa-reddit-square   fa-renren   fa-resistance (alias)   fa-safari   fa-scribd   fa-sellsy   fa-share-alt   fa-share-alt-square   fa-shirtsinbulk   fa-simplybuilt   fa-skyatlas   fa-skype   fa-slack   fa-slideshare   fa-snapchat   fa-snapchat-ghost   fa-snapchat-square   fa-soundcloud   fa-spotify   fa-stack-exchange   fa-stack-overflow   fa-steam   fa-steam-square   fa-stumbleupon   fa-stumbleupon-circle   fa-superpowers   fa-telegram   fa-tencent-weibo   fa-themeisle   fa-trello   fa-tripadvisor   fa-tumblr   fa-tumblr-square   fa-twitch   fa-twitter   fa-twitter-square   fa-usb   fa-viacoin   fa-viadeo   fa-viadeo-square   fa-vimeo   fa-vimeo-square   fa-vine   fa-vk   fa-wechat (alias)   fa-weibo   fa-weixin   fa-whatsapp   fa-wikipedia-w   fa-windows   fa-wordpress   fa-wpbeginner   fa-wpexplorer   fa-wpforms   fa-xing   fa-xing-square   fa-y-combinator   fa-y-combinator-square (alias)   fa-yahoo   fa-yc (alias)   fa-yc-square (alias)   fa-yelp   fa-yoast   fa-youtube   fa-youtube-play   fa-youtube-square  "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/mermaid/","title":"mermaid","tags":[],"description":"","content":"Flowchart example    Show code ... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt; {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt;   mermaid.initialize({startOnLoad:true}); graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  With sub-graphs and some style    Show code... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt; {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; X --\u0026gt; Y linkStyle 0 stroke:#f00,stroke-width:4px; Y --\u0026gt; Z Z --\u0026gt; X linkStyle 1,2 interpolate basis stroke:#0f0,stroke-width:2px; X --\u0026gt; A1 subgraph right A2 --\u0026gt; B2 B2 --\u0026gt; C2 end subgraph left A1 --\u0026gt; B1 B1 --\u0026gt; C1 end C1 --\u0026gt; X Z --\u0026gt; A2 C2 --\u0026gt; Z style Y fill:#f9f,stroke:#333,stroke-width:4px classDef left fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5 class A1,B1,C1 left {{\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt;   mermaid.initialize({startOnLoad:true}); graph LR; X -- Y linkStyle 0 stroke:#f00,stroke-width:4px; Y -- Z Z -- X linkStyle 1,2 interpolate basis stroke:#0f0,stroke-width:2px; X -- A1 subgraph right A2 -- B2 B2 -- C2 end subgraph left A1 -- B1 B1 -- C1 end C1 -- X Z -- A2 C2 -- Z style Y fill:#f9f,stroke:#333,stroke-width:4px classDef left fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5 class A1,B1,C1 left  Sequence example    Show code ... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt; {{\u0026lt;mermaid\u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt;   mermaid.initialize({startOnLoad:true}); sequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!  GANTT Example    Show code ... \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt; {{\u0026lt;mermaid\u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}} \u0026lt;/div\u0026gt;   mermaid.initialize({startOnLoad:true}); gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d  "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/notice/","title":"notice","tags":[],"description":"Disclaimers to help you structure your page","content":"The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}} A notice disclaimer {{% /notice %}}  renders as\nA notice disclaimer\n Info {{% notice info %}} An information disclaimer {{% /notice %}}  renders as\nAn information disclaimer\n Tip {{% notice tip %}} A tip disclaimer {{% /notice %}}  renders as\nA tip disclaimer\n Warning {{% notice warning %}} An warning disclaimer {{% /notice %}}  renders as\nAn warning disclaimer\n "},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-1/","title":"page 1","tags":[],"description":"This is a demo child page","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-1/children-1-1/","title":"page 1-1","tags":[],"description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-1/children-1-1/children-1-1-1/","title":"page 1-1-1","tags":[],"description":"This is a demo child page","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/","title":"page 1-1-1-1","tags":[],"description":"This is a demo child page","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/","title":"page 1-1-1-1-1","tags":[],"description":"This is a demo child page","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-2/","title":"page 2","tags":[],"description":"","content":"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-3/","title":"page 3","tags":[],"description":"This is a demo child page","content":"This is a demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-4/","title":"page 4","tags":[],"description":"This is a demo child page","content":"This is a demo child page, not displayed in the menu\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/test/","title":"page test","tags":[],"description":"This is a page test","content":"This is a test demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-2/test3/","title":"page test 3","tags":[],"description":"This is a page test","content":"This is a test 3 demo child page\n"},{"uri":"https://thedanfernandez.github.io/workshops/guidelines/shortcodes/panel/","title":"panel","tags":[],"description":"Allow you to highlight information or put it in a box.","content":"The panel shortcode Allow you to highlight information or put it in a box. They create a colored box surrounding your text  Usage    Parameter Default Description     header none The title of the panel. If specified, this title will be displayed in its own header row.   footer none the footer of the panel. If specified, this text will be displayed in its own row   theme primary default,primary,info,success,warning,danger    Basic example By default :\n{{% panel %}}this is a panel text{{% /panel %}}  \u0026lt;div class=\u0026quot;panel-body\u0026quot;\u0026gt;this is a panel text\u0026lt;/div\u0026gt;   Panel with heading Easily add a heading container to your panel with header parameter. You may apply any theme.\n{{% panel theme=\u0026quot;danger\u0026quot; header=\u0026quot;panel title\u0026quot; %}}this is a panel text{{% /panel %}}  panel title this is a panel text  {{% panel theme=\u0026quot;success\u0026quot; header=\u0026quot;panel title\u0026quot; %}}this is a panel text{{% /panel %}}  panel title this is a panel text  Panel with footer Wrap a secondary text in footer.\n{{% panel footer=\u0026quot;panel footer\u0026quot; %}}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.{{% /panel %}}  \u0026lt;div class=\u0026quot;panel-body\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n panel footer  Themes Success theme this is a panel text  default theme this is a panel text  primary theme this is a panel text  info theme this is a panel text  warning theme this is a panel text  danger theme this is a panel text  "},{"uri":"https://thedanfernandez.github.io/workshops/tags/","title":"Tags","tags":[],"description":"","content":""}]