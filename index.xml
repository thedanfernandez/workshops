<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuevo Foundation Workshops</title><link>https://thedanfernandez.github.io/workshops/</link><description>Recent content on Nuevo Foundation Workshops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jul 2019 12:40:43 -0700</lastBuildDate><atom:link href="https://thedanfernandez.github.io/workshops/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Repl.It</title><link>https://thedanfernandez.github.io/workshops/python-turtle/using-repl-it/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/using-repl-it/</guid><description>To help Alex live in a beehive, he needs to learn how to create a honeycomb! We will use Python&amp;rsquo;s turtle library to draw a honeycomb for Alex.
Using Repl.it Today you will be using Repl.it to learn how to code in Python. Here is an example interactive window that you will use today:
Before we start, let&amp;rsquo;s first understand how the window works. The main.py file contains code, or instructions for the computer to run.</description></item><item><title>Starting Up</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/starting-up/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/starting-up/</guid><description>Starting Up The goal of today&amp;rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game! Let&amp;rsquo;s get the game set up.
Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/nuevoguesstheword. Your screen should look like this:
We will ignore some of the details on this screen, but we will go over some of the basics that show up.</description></item><item><title>The Basics - Drawing a colored line</title><link>https://thedanfernandez.github.io/workshops/python-turtle/the-basics/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/the-basics/</guid><description>Before Alex can learn how to create a beehive, he must first learn how to draw a colored line. We will add code to the below repl.it window, and we will do this in two parts.
First, we need tell the turtle what color we want the line to be. To do this, let&amp;rsquo;s type in:
turtle.color(&amp;quot;orange&amp;quot;) Let&amp;rsquo;s try to understand this line of code in more detail.
Strings Anything you see in quotation marks is called a string.</description></item><item><title>Writing to Console</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/writing-to-console/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/writing-to-console/</guid><description>Writing to Console Console.WriteLine means to tell the computer to print the sentence enclosed within the parentheses () out onto the console.
Working Together In the repl.it window below, press run. You see that Hello World is printed out to the screen on the right. Without removing the quotation marks, try changing &amp;quot;Hello World&amp;quot; to another sentence. Press run to see if anything changes. Add another Console.WriteLine below the current line to print a second sentence below the first sentence.</description></item><item><title>Activity 1 - Drawing a square</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-1/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-1/</guid><description>Kudos! You helped Alex draw a line! Now let’s step it up and help Alex draw a square. To draw a square, we need to follow these steps:
Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Remember to use turtle.forward() to draw lines.</description></item><item><title>Comments</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/comments/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/comments/</guid><description>Comments Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:
To comment out one line, place // in front of a line of code.</description></item><item><title>Activity 2 - Simplifying code with loops</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-2/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-2/</guid><description>Great! You drew a square. But notice that we are writing the same lines over and over again! We had to repeat the instructions to draw a line and turn left 4 times. Wouldn’t it be great if we can give instructions once and tell the program to repeat it 4 times? Fear not, we can!
To do this, we need to use loops. Loops run a set of instructions multiple times.</description></item><item><title>Activity 1</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-1/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-1/</guid><description>Activity 1 Go to the code containing the GuessTheWord game. Press run. Notice that Press 'run' on the top of the screen to play again. is the only thing that is printed to the console. Let&amp;rsquo;s add a welcome message so that the player knows they playing the Guess the Word game.
Find // TODO (ACTIVITY 1) in the code. Add a line of code to print Welcome to C# GuessTheWord to the console.</description></item><item><title>Activity 3 - Drawing a hexagon</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-3/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-3/</guid><description>Great job! You just drew your first shape in Python with Turtle! Now let’s slightly change the code we already wrote to draw a square to instead draw a hexagon. Alex is a bee, after all, and he needs to draw hexagons to build his first honeycomb.
To help you draw a hexagon, think of how many sides a hexagon has. How many degrees are in each angle of a hexagon?</description></item><item><title>Strings</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/strings/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/strings/</guid><description>Strings Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, &amp;quot;a&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;banana!&amp;quot;, and &amp;quot;Hello World&amp;quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing.
You can combine many strings together using the + operator. For example:
&amp;quot;Apple&amp;quot; + &amp;quot;Pineapple&amp;quot; produces the string &amp;quot;ApplePineapple&amp;quot;. &amp;quot;Nuevo&amp;quot; + &amp;quot; &amp;quot; + &amp;quot;Foundation&amp;quot; produces the string &amp;quot;Nuevo Foundation&amp;quot;.</description></item><item><title>Activity 4 - Simplifying code with functions</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-4/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-4/</guid><description>We drew one hexagon. But this is just one of many hexagons Alex needs to build his honeycomb. Once again, it seems that we would have to repeat the code many times to draw multiple hexagons. Fortunately, we don&amp;rsquo;t have to! Functions to the rescue!
Functions A function is a way to group together lines of code to do something. For instance, turtle.forward(50) moves the turtle forward 50 steps, and turtle.</description></item><item><title>Activity 2</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-2/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-2/</guid><description>Activity 2 Find // TODO (ACTIVITY 2) in the GuessTheWord code. For the Guess the Word game, we will give the computer a word bank, and the computer will choose one of the words randomly to use for the game. So far, we have added the words &amp;quot;Hello&amp;quot; and &amp;quot;World&amp;quot; to the word bank. However, a Guess the Word game with only two possible words to guess is not fun at all!</description></item><item><title>Activity 5 - Drawing a honeycomb</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-5/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-5/</guid><description>This is the finale! Let&amp;rsquo;s create the honeycomb that Alex will live in. Fortunately, a honeycomb is simply 6 hexagons, so let&amp;rsquo;s combine our knowledge of functions and loops to make our honeycomb!
In this activity, create a new function called draw_honeycomb(). Inside the function body, create a loop that repeats 6 times. Inside the loop we have to first draw a hexagon using our draw_hexagon() function we previously defined. Next, move the turtle so it can draw the next hexagon.</description></item><item><title>Numbers</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/numbers/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/numbers/</guid><description>Numbers The computer can also do regular math that you see in school. Use Console.WriteLine to print out the result from the math expressions. No quotation marks are needed for numbers!
Console.WriteLine(5 + 4); Console.WriteLine(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:
Operator Description Operator Description + Add \ | Divide | - Subtract % Modulo (remainder) * Multiply (,) Parenthesis Fun Fact: Computer Division The computer does division differently from your regular calculator.</description></item><item><title>Part 2 - Building a Mandala Flower</title><link>https://thedanfernandez.github.io/workshops/python-turtle/part-2/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/part-2/</guid><description>Great job! You finished building a honeycomb for Alex’s beehive, but Alex needs to also get his pollen from flowers! Wouldn’t it be nice to add a flower to the picture as well? In part 2, we will be creating a mandala flower!
(Stay tuned - we&amp;rsquo;ll show you what a mandala flower looks like.)</description></item><item><title>Booleans</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/booleans/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/booleans/</guid><description>Booleans Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, &amp;ldquo;Are you a robot?&amp;quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false.
We can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for &amp;ldquo;equal to&amp;rdquo; and &amp;ldquo;not equal to&amp;rdquo;:</description></item><item><title>Activity 6 - Moving the turtle</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-6/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-6/</guid><description>Our first step is to move the turtle to a new location to draw the flower (we don’t want to draw the flower on top of the beehive!). To do this, we first need to use the following methods:
turtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() tells the turtle to pick up its pen so it doesn’t draw while it is moving. Then, with turtle.goto(x,y), we are telling the turtle the position where the turtle moves to.</description></item><item><title>Boolean Operators</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/boolean-operators/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/boolean-operators/</guid><description>Booleans Operators You can also connect boolean expressions together using the &amp;amp;&amp;amp; (AND) and the || (OR) operator. For example, suppose I ask: &amp;ldquo;Are you a human, and is Nuvi a robot?&amp;rdquo; The word &amp;ldquo;and&amp;rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true.
Here&amp;rsquo;s a chart that describes what happens when we connect booleans together:</description></item><item><title>Activity 7 - Drawing a figure 8</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-7/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-7/</guid><description>Great! Now let’s make a figure 8 as the first step to making a mandala flower! A figure 8 is just two circles that are opposite to each other. To do this we can make use of the turtle.circle(x) method, which takes an integer x as the radius of the circle. (You may recall that 2 * radius is how wide the circle is.) Having the radius as an argument means we can decide how big or small the circle should be.</description></item><item><title>Variables</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/variables/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/variables/</guid><description>Variables Variables are simply names that we can give to values such as strings, numbers and booleans. We use variables to store information that the computer can keep track of.
Here&amp;rsquo;s how to declare a variable named str. We say str has the value &amp;quot;Hello World&amp;quot;. Can you describe what the other variables below mean?
var str = &amp;#34;Hello World&amp;#34;; var x = 88; var happy = true; Press run. Note that variables are not printed out to the console.</description></item><item><title>Activity 8 - Creating a mandala flower</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-8/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-8/</guid><description>We’re done creating our first figure 8! We can now use the figure_8() function to create a mandala flower! A mandala flower is many figure 8s placed on top of each other at different angles. So, to do this we need to use a&amp;hellip; you guessed it, a loop!
Create a new function called mandala_flower(). In the loop we will call the figure_8() function we wrote earlier to create a figure 8.</description></item><item><title>Activity 3</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-3/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-3/</guid><description>Activity 3 This activity is split into 2 parts and will test your knowledge about variables.
Activity 3.1 At the start of the game, we should tell the player how many letters the word to guess has. For example, if the word to guess is &amp;quot;Hello&amp;quot;, we should tell the player: The word has 5 letters. We have already stored the number of letters in the numberOfLetters variable, so use it to complete this activity.</description></item><item><title>Activity 9 - Coloring your mandala flower</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-9/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-9/</guid><description>Now that we have the shape of a mandala flower, it’s time to color it! We’re still going to use the turtle.color() method; however this time we’re going to use an RGB value instead of a string color value, so that we can produce a larger variety of colors.
RGB (Red-Green-Blue) colors In primary school, you might recall that by mixing colors together, you can produce new colors. For example, combining red and blue together make purple.</description></item><item><title>Reading from Console</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/reading-from-console/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/reading-from-console/</guid><description>Reading from Console Now that we know the basics about variables, we can now accept input from the user. Use the following line to tell the console to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called input.
var input = Console.ReadLine(); Here&amp;rsquo;s an example of how to use Console.ReadLine to accept user input:</description></item><item><title>Activity 10 - Randomizing the color of your mandala flower petals</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-10/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-10/</guid><description>We’ve successfully set the color of the mandala flower to an RGB value. Now, let&amp;rsquo;s explore changing the color of the individual mandala flower petals?
We will make use of python’s random library. The random.randint() method allows us to choose a random value for each of the red, green, or blue value. To choose a value that is between 0 inclusive and 256 exclusive (in other words, between 0 and 255 inclusive), we need to use random.</description></item><item><title>Activity 4</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-4/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-4/</guid><description>Activity 4 This activity has four parts. This is a great time to use your knowledge of comments, numbers, variables, and reading from console to complete the 4 activities. Some background information for each activity is provided below, and hints are provided in the code. After each part, press run and make sure there are no errors present in the console.
Activity 4.1 First, let&amp;rsquo;s introduce some more code into our game.</description></item><item><title>Activity 11 - Now, it's your turn!</title><link>https://thedanfernandez.github.io/workshops/python-turtle/activity-11/</link><pubDate>Thu, 25 Jul 2019 13:24:17 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/activity-11/</guid><description>If there is any time left, try drawing your own shapes and designs! Make your picture interesting using various shapes and colors.
Click here to open a new blank repl.it window to start on your creation.
Help, I am stuck! Stuck? Check the Answer key for the activity that you are stuck on!
### INTRODUCTION import turtle # This is a comment. Add your code below this line. turtle.shape(&amp;quot;turtle&amp;quot;) turtle.color(&amp;quot;orange&amp;quot;) turtle.</description></item><item><title>If-else statements</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/if-else-statements/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/if-else-statements/</guid><description>If-else statements You can use if statements to run code statement only if certain conditions are met. Here is an example:
var myNum = (93 + 41) / 12; if (myNum == 11) { Console.WriteLine(&amp;#34;They are equal!&amp;#34;); } Inside the () beside if, you should specify a boolean expression. If the expression is true, the code inside { } is executed. In this case, since myNum is equal to 11, They are equal!</description></item><item><title>Activity 5</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-5/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-5/</guid><description>Activity 5 This activity is split into two parts. Use your knowledge of if-else statements to complete the activities. As always, press run after completing each part to check for errors.
Activity 5.1 After the player guesses a letter, and we have checked whether the letter appears in the word, we need to check if the entire word has been guessed. If the entire word has been correctly identified, we should let the computer know that the player has won the game.</description></item><item><title>While loops</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/while-loops/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/while-loops/</guid><description>While loops while loops are an easy way to repeat the execution of lines without having to reuse a line many times. For example, to print Hello World five times in a row, you can do:
var counter = 1; while (counter &amp;lt;= 5) { Console.WriteLine(&amp;#34;Hello World&amp;#34;); counter = counter + 1; } Like an if statement, inside the () beside while, you should specify a boolean expression. If the expression is true, the code inside the curly braces { } is executed.</description></item><item><title>Activity 6</title><link>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-6/</link><pubDate>Tue, 23 Jul 2019 11:45:38 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/csharp-guess-the-word/activity-6/</guid><description>Activity 6 - Completing the game! Now, let&amp;rsquo;s finally address the bug that was introduced in Activity 4.2. The game should continue to ask the player to guess letters if they have some lives remaining, and they have not yet won the game. Look at the for loop. As you might have noticed, even though you might have lives remaining, the game abruptly stops after only 3 guesses. We will replace this for-loop with a while-loop, with the correct looping condition.</description></item><item><title>Python Turtle Spanish</title><link>https://thedanfernandez.github.io/workshops/python-turtle/old/</link><pubDate>Sun, 22 Sep 2019 23:26:18 -0500</pubDate><guid>https://thedanfernandez.github.io/workshops/python-turtle/old/</guid><description>Python con Turtle Introducción Bienvenidos al mundo de Nueva Colmena! Llegaste justo a tiempo para ayudar a nuestra abeja bebé Alex.
Alex vive en un país llamado Isla Tortuga. Los habitantes de Isla Tortuga hablan un lenguaje llamado Python. Vamos a usar este lenguaje para enseñar a Alex cómo vivir en una colmena. ¿Estás listo para jugar?
Part 1 - Construyendo la colmena Para que Alex pueda vivir en una colmena, necesita aprender a construir un panal.</description></item><item><title>Web Developer Guidelines</title><link>https://thedanfernandez.github.io/workshops/guidelines/web-developer/</link><pubDate>Mon, 22 Jul 2019 14:08:32 -0700</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/web-developer/</guid><description>This document is for website developers only for changing the Nuevo Foundation workshop project templates and style.
Before getting started Before adding/updating the website, ensure you have sync&amp;rsquo;d with the project team and the existing work in the Project Backlog.
Setup Follow the instructions in the Project readme.md to install Git and Hugo to test the project locally.
Web design styles and structure Images: Website images should be themes/images CSS Ignore the SCSS files and just use CSS files in /themes/docdock/static/css/ Make sure to add a reference to the CSS you want to include in the head.</description></item><item><title>alert</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/alert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/alert/</guid><description>The alert shortcode allow you to highlight information in your page. They create a colored box surrounding your text, like this:
role=&amp;quot;alert&amp;quot;&amp;gt;This is an alert !
Usage Parameter Default Description theme info success, info,warning,danger role=&amp;quot;alert&amp;quot;&amp;gt; Tips : setting only the theme as argument works too : {{%alert warning%}} instead of {{%alert theme=&amp;quot;warning&amp;quot;%}}
Basic examples {{% alert theme=&amp;quot;info&amp;quot; %}}**this** is a text{{% /alert %}} {{% alert theme=&amp;quot;success&amp;quot; %}}**Yeahhh !</description></item><item><title>attachments</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/attachments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/attachments/</guid><description>The Attachments shortcode displays a list of files attached to a page. Example :
role=&amp;quot;alert&amp;quot;&amp;gt; Attachments
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/BachGavotteShort.mp3&amp;quot; &amp;gt; BachGavotteShort.mp3 &amp;lt;/a&amp;gt; (357 kB) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/Carroll_AliceAuPaysDesMerveilles.pdf&amp;quot; &amp;gt; Carroll_AliceAuPaysDesMerveilles.pdf &amp;lt;/a&amp;gt; (175 kB) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/adivorciarsetoca00cape.pdf&amp;quot; &amp;gt; adivorciarsetoca00cape.pdf &amp;lt;/a&amp;gt; (361 kB) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/hugo.png&amp;quot; &amp;gt; hugo.png &amp;lt;/a&amp;gt; (17 kB) &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;https://thedanfernandez.github.io/workshops//guidelines/shortcodes/attachments.files/movieselectricsheep-flock-244-32500-2.mp4&amp;quot; &amp;gt; movieselectricsheep-flock-244-32500-2.mp4 &amp;lt;/a&amp;gt; (340 kB) &amp;lt;/li&amp;gt; Usage The shortcurt lists files found in a specific folder.</description></item><item><title>button</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/button/</guid><description>Display an actionable button in your page.
This is a warning button Usage Parameter Default Description href &amp;quot;&amp;rdquo; The location href to link to align &amp;ldquo;center&amp;rdquo; horizontal align button on page theme primary default, primary , success,info,warning,danger The inner text you place in short code will be displayed as the button text
Demo {{&amp;lt; button href=&amp;quot;https://google.</description></item><item><title>expand</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/expand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/expand/</guid><description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
Expand me... &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;expand-content&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description></item><item><title>icon</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/icon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/icon/</guid><description>Display an icon like `
`
It uses :
glyphicons library (bootstrap).more info here fontawesome library more info here This icon shortcode will display an icon in your page.
Usage Parameter Default Description name required name of icon (see bellow) size none size of icon, medium, xx-small, x-small, small, large, x-large, xx-large, 11px, 2em, 20%&amp;hellip;. role=&amp;quot;alert&amp;quot;&amp;gt; Tips : setting only the name as argument works too : {{&amp;lt;icon film&amp;gt;}} instead of {{&amp;lt;icon name=&amp;quot;film&amp;quot;&amp;gt;}}</description></item><item><title>mermaid</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/mermaid/</guid><description>Flowchart example Show code ... &amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;expand-content&amp;quot; style=&amp;quot;display: none;&amp;quot;&amp;gt; {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}} &amp;lt;/div&amp;gt; mermaid.initialize({startOnLoad:true}); graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two] With sub-graphs and some style Show code.</description></item><item><title>notice</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/notice/</guid><description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer
Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer
Warning {{% notice warning %}} An warning disclaimer {{% /notice %}} renders as</description></item><item><title>page test</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/test/</guid><description>This is a test demo child page</description></item><item><title>page test 3</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-2/test3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/children/children-2/test3/</guid><description>This is a test 3 demo child page</description></item><item><title>panel</title><link>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/panel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://thedanfernandez.github.io/workshops/guidelines/shortcodes/panel/</guid><description>The panel shortcode Allow you to highlight information or put it in a box. They create a colored box surrounding your text Usage Parameter Default Description header none The title of the panel. If specified, this title will be displayed in its own header row. footer none the footer of the panel. If specified, this text will be displayed in its own row theme primary default,primary,info,success,warning,danger Basic example By default :</description></item></channel></rss>